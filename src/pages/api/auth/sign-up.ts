import cookie from 'cookie';
import { server } from '@passwordless-id/webauthn';
import type { NextApiRequest, NextApiResponse } from 'next';
import { getDomain } from '../../../lib/utils/common';
import { ICredential, IUser } from '../../../interfaces/webauthn';

type Data = {
  payload: string | ICredential;
};

const CREDENTIALS_ARRAY: ICredential[] = [];
const REGISTRATION_ARRAY = [
  {
    credential: {
      id: 'KiUmnebT-CH4Bk9iSekfcpxEtc4',
      publicKey:
        'MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEHgM9w621iM8arTj0TeLRltBs-oCaCj7psi-hAugT8cqau0Zr9a22Ne2bWGneRrpp4YFWaU15GUbV_ACuB63-3g==',
      algorithm: 'ES256',
    },
  },
];

export default async function handler(req: NextApiRequest, res: NextApiResponse<Data>) {
  try {
    if (req.method !== 'POST') {
      throw new Error('Only POST requests are allowed');
    }

    // const cookies = cookie.parse(req.headers.cookie || '');

    // const credentials = cookies.credentials ? JSON.parse(cookies.credentials) : CREDENTIALS_ARRAY;

    const origin = getDomain() || process.env.DOMAIN_FOR_DEVELOPMENT || 'http://localhost:3000/';

    const isRegistered = REGISTRATION_ARRAY.find(
      (c: { credential: ICredential }) => c.credential.id === 'KiUmnebT-CH4Bk9iSekfcpxEtc4'
    );
    // eslint-disable-next-line no-console
    console.log('isRegistered', isRegistered);

    const { registration } = req.body;
    // eslint-disable-next-line no-console
    console.log('req.body', req.body);

    const expected = {
      challenge: 'RklETzIuVEVTVC5yZWctMTcxMjE3Njg1MC1oZWxsbw', // whatever was randomly generated by the server
      origin,
    };
    const registrationParsed = (await server.verifyRegistration(registration, expected)) as IUser;
    const { credential } = registrationParsed;

    // eslint-disable-next-line no-console
    console.log('registrationParsed', registrationParsed);
    // eslint-disable-next-line no-console
    console.log('origin', origin);

    CREDENTIALS_ARRAY.push(credential);
    // eslint-disable-next-line no-console
    console.log('TEMP_USERS_ARRAY', CREDENTIALS_ARRAY);

    const expiration = new Date();
    // expiration.setDate(expiration.getDate() + COOKIE_PERIOD_FAVORITES);
    // set hr
    expiration.setHours(expiration.getHours() + 1);

    res.setHeader(
      'Set-Cookie',
      cookie.serialize('FIDO2', JSON.stringify(CREDENTIALS_ARRAY), {
        httpOnly: true,
        // secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        expires: expiration,
        // expires: new Date(Date.now() + 60 * 60 * 24 * 7 * 1000),
        // maxAge: 60 * 60 * 24 * 7, // 1 week
        path: '/',
      })
    );

    // if (!user) {
    //   throw new Error('User not found');
    // }

    // const isMatch = await bcrypt.compare(password, user.password);
    // if (!isMatch) {
    //   throw new Error('Invalid credentials');
    // }

    res.status(200).json({ payload: credential });
  } catch (error) {
    // TODO: handle authentification error (20240403 - Shirley)
    // eslint-disable-next-line no-console
    console.log('error', error);
    res.status(400).json({ payload: 'error' });
  }
}
