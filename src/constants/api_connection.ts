import { IAPIConfig, IAPIInput, IAPIName, IAPIOutput } from '@/interfaces/api_connection';

const apiVersion = 'v1';
const apiPrefix = `/api/${apiVersion}`;

const apiVersionV2 = 'v2';
const apiPrefixV2 = `/api/${apiVersionV2}`;

const initialInput: IAPIInput = {
  header: {},
  body: {},
  params: {},
  query: {},
};

export enum HttpMethod {
  GET = 'GET',
  POST = 'POST',
  PUT = 'PUT',
  DELETE = 'DELETE',
  PATCH = 'PATCH',
  HEAD = 'HEAD',
}

export enum APIName {
  AGREE_TO_TERMS = 'AGREE_TO_TERMS',
  CREATE_CHALLENGE = 'CREATE_CHALLENGE',
  SIGN_UP = 'SIGN_UP',
  SIGN_IN = 'SIGN_IN',
  SIGN_OUT = 'SIGN_OUT',
  EMAIL = 'EMAIL',
  USER_GET_BY_ID = 'USER_GET_BY_ID',
  USER_UPDATE = 'USER_UPDATE',
  COMPANY_LIST = 'COMPANY_LIST',
  COMPANY_GET = 'COMPANY_GET',
  COMPANY_ADD = 'COMPANY_ADD',
  COMPANY_ADD_BY_INVITATION_CODE = 'COMPANY_ADD_BY_INVITATION_CODE',
  COMPANY_SELECT = 'COMPANY_SELECT',
  CERTIFICATE_LIST_V2 = 'CERTIFICATE_LIST_V2',
  CERTIFICATE_GET_V2 = 'CERTIFICATE_GET_V2',
  CERTIFICATE_POST_V2 = 'CERTIFICATE_POST_V2',
  CERTIFICATE_PUT_V2 = 'CERTIFICATE_PUT_V2',
  CERTIFICATE_DELETE_V2 = 'CERTIFICATE_DELETE_V2',
  PROFIT_GET_INSIGHT = 'PROFIT_GET_INSIGHT',
  INCOME_EXPENSE_GET_TREND_IN_PERIOD = 'INCOME_EXPENSE_GET_TREND_IN_PERIOD',
  LABOR_COST_CHART = 'LABOR_COST_CHART',
  PROFIT_GET_TREND_IN_PERIOD = 'PROFIT_GET_TREND_IN_PERIOD',
  PROJECT_LIST_PROGRESS = 'PROJECT_LIST_PROGRESS',
  PROJECT_LIST_PROFIT_COMPARISON = 'PROJECT_LIST_PROFIT_COMPARISON',
  ASSET_MANAGEMENT_LIST = 'ASSET_MANAGEMENT_LIST',
  ASSET_MANAGEMENT_ADD = 'ASSET_MANAGEMENT_ADD',
  ASSET_MANAGEMENT_GET_BY_ID = 'ASSET_MANAGEMENT_GET_BY_ID',
  ASSET_MANAGEMENT_UPDATE = 'ASSET_MANAGEMENT_UPDATE',
  OCR_UPLOAD = 'OCR_UPLOAD',
  OCR_DELETE = 'OCR_DELETE',
  OCR_RESULT_GET_BY_ID = 'OCR_RESULT_GET_BY_ID',
  OCR_LIST = 'OCR_LIST',
  INVOICE_CREATE = 'INVOICE_CREATE',
  INVOICE_UPDATE = 'INVOICE_UPDATE',
  INVOICE_GET_BY_ID = 'INVOICE_GET_BY_ID',
  AI_ASK_STATUS = 'AI_ASK_STATUS',
  AI_ASK_RESULT = 'AI_ASK_RESULT',
  AI_ASK_V2 = 'AI_ASK_V2',
  AI_ASK_RESULT_V2 = 'AI_ASK_RESULT_V2',
  VOUCHER_CREATE = 'VOUCHER_CREATE',
  VOUCHER_UPDATE = 'VOUCHER_UPDATE',
  VOUCHER_LIST_V2 = 'VOUCHER_LIST_V2',
  VOUCHER_POST_V2 = 'VOUCHER_POST_V2',
  VOUCHER_GET_BY_ID_V2 = 'VOUCHER_GET_BY_ID_V2',
  VOUCHER_DELETE_V2 = 'VOUCHER_DELETE_V2',
  VOUCHER_WAS_READ_V2 = 'VOUCHER_WAS_READ_V2',
  VOUCHER_PUT_V2 = 'VOUCHER_PUT_V2',
  JOURNAL_GET_BY_ID = 'JOURNAL_GET_BY_ID',
  JOURNAL_LIST = 'JOURNAL_LIST',
  // JOURNAL_UPDATE = 'JOURNAL_UPDATE', // Info: (20240723 - Tzuhan)
  JOURNAL_DELETE = 'JOURNAL_DELETE',
  REPORT_LIST = 'REPORT_LIST',
  REPORT_GET_BY_ID = 'REPORT_GET_BY_ID',
  REPORT_GET_V2 = 'REPORT_GET_V2',
  REPORT_GENERATE = 'REPORT_GENERATE',
  STATUS_INFO_GET = 'STATUS_INFO_GET',
  ACCOUNT_LIST = 'ACCOUNT_LIST',
  FILE_UPLOAD = 'FILE_UPLOAD',
  PUBLIC_FILE_UPLOAD = 'PUBLIC_FILE_UPLOAD',
  FILE_DELETE = 'FILE_DELETE',
  FILE_GET = 'FILE_GET',
  COMPANY_GET_BY_ID = 'COMPANY_GET_BY_ID',
  COMPANY_DELETE = 'COMPANY_DELETE',
  COMPANY_UPDATE = 'COMPANY_UPDATE',
  ROLE_LIST = 'ROLE_LIST',
  CREATE_ROLE = 'CREATE_ROLE',
  ROLE_SELECT = 'ROLE_SELECT',
  ROLE_GET_BY_ID = 'ROLE_GET_BY_ID',
  ROLE_DELETE = 'ROLE_DELETE',
  ROLE_UPDATE = 'ROLE_UPDATE',
  NEWS_LIST = 'NEWS_LIST',
  CREATE_NEWS = 'CREATE_NEWS',
  KYC_UPLOAD = 'KYC_UPLOAD',
  ACCOUNT_GET_BY_ID = 'ACCOUNT_GET_BY_ID',
  CREATE_NEW_SUB_ACCOUNT = 'CREATE_NEW_SUB_ACCOUNT',
  UPDATE_ACCOUNT_INFO_BY_ID = 'UPDATE_ACCOUNT_INFO_BY_ID',
  DELETE_ACCOUNT_BY_ID = 'DELETE_ACCOUNT_BY_ID',
  TRANSFER_OWNER = 'TRANSFER_OWNER',
  PROJECT_LIST = 'PROJECT_LIST',
  CREATE_PROJECT = 'CREATE_PROJECT',
  GET_PROJECT_BY_ID = 'GET_PROJECT_BY_ID',
  UPDATE_PROJECT_BY_ID = 'UPDATE_PROJECT_BY_ID',
  PUBLIC_KEY_GET = 'PUBLIC_KEY_GET',
  ZOD_EXAMPLE = 'ZOD_EXAMPLE', // Info: (20240909 - Murky) This is a Zod example, to demonstrate how to use Zod schema to validate data.
  CERTIFICATE_LIST = 'CERTIFICATE_LIST',
  PUSHER = 'PUSHER',
  ENCRYPT = 'ENCRYPT',
  DECRYPT = 'DECRYPT',
  ASSET_GET_BY_ID_V2 = 'ASSET_GET_BY_ID_V2',
  ASK_AI_V2 = 'ASK_AI_V2',
}

export enum APIPath {
  AGREE_TO_TERMS = `${apiPrefix}/user/:userId/agreement`,
  CREATE_CHALLENGE = `${apiPrefix}/challenge`,
  SIGN_UP = `${apiPrefix}/sign_up`,
  SIGN_IN = `${apiPrefix}/sign_in`,
  SIGN_OUT = `${apiPrefix}/sign_out`,
  EMAIL = `${apiPrefix}/email`,
  USER_GET_BY_ID = `${apiPrefix}/user/:userId`,
  USER_UPDATE = `${apiPrefix}/user/:userId`,
  COMPANY_LIST = `${apiPrefix}/company`,
  COMPANY_ADD = `${apiPrefix}/company`,
  COMPANY_ADD_BY_INVITATION_CODE = `${apiPrefix}/user/:userId/invitation`,
  COMPANY_SELECT = `${apiPrefix}/company/:companyId/select`,
  CERTIFICATE_LIST_V2 = `${apiPrefixV2}/company/:companyId/certificate`,
  CERTIFICATE_GET_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  CERTIFICATE_POST_V2 = `${apiPrefixV2}/company/:companyId/certificate`,
  CERTIFICATE_PUT_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  CERTIFICATE_DELETE_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  PROFIT_GET_INSIGHT = `${apiPrefix}/company/:companyId/profit_insight`,
  INCOME_EXPENSE_GET_TREND_IN_PERIOD = `${apiPrefix}/company/:companyId/income_expense_trend`,
  LABOR_COST_CHART = `${apiPrefix}/company/:companyId/labor_cost_chart`,
  PROJECT_LIST_PROGRESS = `${apiPrefix}/company/:companyId/project_progress`,
  PROJECT_LIST_PROFIT_COMPARISON = `${apiPrefix}/company/:companyId/profit_comparison`,
  ASSET_MANAGEMENT_LIST = `${apiPrefix}/company/:companyId/asset_management`,
  ASSET_MANAGEMENT_ADD = `${apiPrefix}/company/:companyId/asset_management`,
  ASSET_MANAGEMENT_GET_BY_ID = `${apiPrefix}/company/:companyId/asset_management/:assetId`,
  ASSET_MANAGEMENT_UPDATE = `${apiPrefix}/company/:companyId/asset_management/:assetId`,
  OCR_UPLOAD = `${apiPrefix}/company/:companyId/ocr`,
  OCR_DELETE = `${apiPrefix}/company/:companyId/ocr/:resultId`,
  OCR_RESULT_GET_BY_ID = `${apiPrefix}/company/:companyId/ocr/:resultId`,
  OCR_LIST = `${apiPrefix}/company/:companyId/ocr`,
  INVOICE_CREATE = `${apiPrefix}/company/:companyId/invoice`,
  INVOICE_UPDATE = `${apiPrefix}/company/:companyId/invoice/:invoiceId`,
  INVOICE_GET_BY_ID = `${apiPrefix}/company/:companyId/invoice/:invoiceId`,
  AI_ASK_STATUS = `${apiPrefix}/company/:companyId/ask_ai/:resultId/status`,
  AI_ASK_RESULT = `${apiPrefix}/company/:companyId/ask_ai/:resultId`,
  AI_ASK_V2 = `${apiPrefix}/company/:companyId/ask_ai`,
  AI_ASK_RESULT_V2 = `${apiPrefix}/company/:companyId/ask_ai/:resultId`,
  VOUCHER_CREATE = `${apiPrefix}/company/:companyId/voucher`,
  VOUCHER_UPDATE = `${apiPrefix}/company/:companyId/voucher/:voucherId`,
  VOUCHER_LIST_V2 = `${apiPrefixV2}/company/:companyId/voucher`,
  VOUCHER_POST_V2 = `${apiPrefixV2}/company/:companyId/voucher`,
  VOUCHER_GET_BY_ID_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_PUT_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_DELETE_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_WAS_READ_V2 = `${apiPrefixV2}/company/:companyId/voucher/read`,
  JOURNAL_GET_BY_ID = `${apiPrefix}/company/:companyId/journal/:journalId`,
  JOURNAL_LIST = `${apiPrefix}/company/:companyId/journal`,
  // JOURNAL_UPDATE = `${apiPrefix}/company/:companyId/journal/:journalId`, // Info: (20240720 - Tzuhan)
  JOURNAL_DELETE = `${apiPrefix}/company/:companyId/journal/:journalId`,
  REPORT_LIST = `${apiPrefix}/company/:companyId/report`,
  REPORT_GET_BY_ID = `${apiPrefix}/company/:companyId/report/:reportId`,
  REPORT_GET_V2 = `${apiPrefixV2}/company/:companyId/report`,
  REPORT_GENERATE = `${apiPrefix}/company/:companyId/report`,
  STATUS_INFO_GET = `${apiPrefix}/status_info`,
  ACCOUNT_LIST = `${apiPrefix}/company/:companyId/account`,
  FILE_UPLOAD = `${apiPrefix}/company/:companyId/file`,
  PUBLIC_FILE_UPLOAD = `${apiPrefixV2}/upload`,
  FILE_DELETE = `${apiPrefix}/company/:companyId/file/:fileId`,
  FILE_GET = `${apiPrefix}/company/:companyId/file/:fileId`,
  COMPANY_GET_BY_ID = `${apiPrefix}/company/:companyId`,
  COMPANY_DELETE = `${apiPrefix}/company/:companyId`,
  COMPANY_UPDATE = `${apiPrefix}/company/:companyId`,
  ROLE_LIST = `${apiPrefixV2}/company/:companyId/role`,
  CREATE_ROLE = `${apiPrefixV2}/company/:companyId/role`,
  ROLE_SELECT = `${apiPrefixV2}/company/:companyId/role/select`,
  ROLE_GET_BY_ID = `${apiPrefix}/company/:companyId/role/:roleId`,
  ROLE_DELETE = `${apiPrefix}/company/:companyId/role/:roleId`,
  ROLE_UPDATE = `${apiPrefix}/company/:companyId/role/:roleId`,
  NEWS_LIST = `${apiPrefix}/news`,
  CREATE_NEWS = `${apiPrefix}/news`,
  KYC_UPLOAD = `${apiPrefix}/company/:companyId/kyc`,
  ACCOUNT_GET_BY_ID = `${apiPrefix}/company/:companyId/account/:accountId`,
  CREATE_NEW_SUB_ACCOUNT = `${apiPrefix}/company/:companyId/account`,
  UPDATE_ACCOUNT_INFO_BY_ID = `${apiPrefix}/company/:companyId/account/:accountId`,
  DELETE_ACCOUNT_BY_ID = `${apiPrefix}/company/:companyId/account/:accountId`,
  TRANSFER_OWNER = `${apiPrefix}/company/:companyId/transfer_owner`,
  PROJECT_LIST = `${apiPrefix}/company/:companyId/project`,
  CREATE_PROJECT = `${apiPrefix}/company/:companyId/project`,
  GET_PROJECT_BY_ID = `${apiPrefix}/company/:companyId/project/:projectId`,
  UPDATE_PROJECT_BY_ID = `${apiPrefix}/company/:companyId/project/:projectId`,
  PUBLIC_KEY_GET = `${apiPrefix}/company/:companyId/public_key`,
  ZOD_EXAMPLE = `${apiPrefix}/company/zod`, // Info: (20240909 - Murky) This is a Zod example, to demonstrate how to use Zod schema to validate data.
  CERTIFICATE_LIST = `${apiPrefix}/company/:companyId/certificate`,
  PUSHER = `${apiPrefixV2}/pusher`,
  ENCRYPT = `${apiPrefixV2}/encrypt`,
  DECRYPT = `${apiPrefixV2}/decrypt`,
  ASSET_GET_BY_ID_V2 = `${apiPrefixV2}/company/:companyId/asset/:assetId`,
  ASK_AI_V2 = `${apiPrefixV2}/company/:companyId/ask_ai/:resultId`,
}
const createConfig = ({
  name,
  method,
  path,
  input = initialInput,
  output = {},
  useWorker = false,
}: {
  name: IAPIName;
  method: HttpMethod;
  path: APIPath;
  input?: IAPIInput;
  output?: IAPIOutput;
  useWorker?: boolean;
}): IAPIConfig => ({
  name,
  method,
  path,
  input,
  output,
  useWorker,
});

export const APIConfig: Record<IAPIName, IAPIConfig> = {
  [APIName.AGREE_TO_TERMS]: createConfig({
    name: APIName.AGREE_TO_TERMS,
    method: HttpMethod.POST,
    path: APIPath.AGREE_TO_TERMS,
  }),
  [APIName.CREATE_CHALLENGE]: createConfig({
    name: APIName.CREATE_CHALLENGE,
    method: HttpMethod.GET,
    path: APIPath.CREATE_CHALLENGE,
  }),
  [APIName.SIGN_UP]: createConfig({
    name: APIName.SIGN_UP,
    method: HttpMethod.POST,
    path: APIPath.SIGN_UP,
  }),
  [APIName.SIGN_IN]: createConfig({
    name: APIName.SIGN_IN,
    method: HttpMethod.POST,
    path: APIPath.SIGN_IN,
  }),
  [APIName.SIGN_OUT]: createConfig({
    name: APIName.SIGN_OUT,
    method: HttpMethod.POST,
    path: APIPath.SIGN_OUT,
  }),
  [APIName.EMAIL]: createConfig({
    name: APIName.EMAIL,
    method: HttpMethod.POST,
    path: APIPath.EMAIL,
  }),
  [APIName.USER_GET_BY_ID]: createConfig({
    name: APIName.USER_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.USER_GET_BY_ID,
  }),
  [APIName.OCR_RESULT_GET_BY_ID]: createConfig({
    name: APIName.OCR_RESULT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.OCR_RESULT_GET_BY_ID,
  }),
  [APIName.OCR_UPLOAD]: createConfig({
    name: APIName.OCR_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.OCR_UPLOAD,
  }),
  [APIName.OCR_DELETE]: createConfig({
    name: APIName.OCR_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.OCR_DELETE,
  }),
  [APIName.INVOICE_CREATE]: createConfig({
    name: APIName.INVOICE_CREATE,
    method: HttpMethod.POST,
    path: APIPath.INVOICE_CREATE,
  }),
  [APIName.INVOICE_UPDATE]: createConfig({
    name: APIName.INVOICE_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.INVOICE_UPDATE,
  }),
  [APIName.INVOICE_GET_BY_ID]: createConfig({
    name: APIName.INVOICE_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.INVOICE_GET_BY_ID,
  }),
  [APIName.AI_ASK_STATUS]: createConfig({
    name: APIName.AI_ASK_STATUS,
    method: HttpMethod.GET,
    path: APIPath.AI_ASK_STATUS,
  }),
  [APIName.AI_ASK_RESULT]: createConfig({
    name: APIName.AI_ASK_RESULT,
    method: HttpMethod.GET,
    path: APIPath.AI_ASK_RESULT,
  }),
  [APIName.VOUCHER_CREATE]: createConfig({
    name: APIName.VOUCHER_CREATE,
    method: HttpMethod.POST,
    path: APIPath.VOUCHER_CREATE,
  }),
  [APIName.VOUCHER_UPDATE]: createConfig({
    name: APIName.VOUCHER_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.VOUCHER_UPDATE,
  }),
  [APIName.JOURNAL_LIST]: createConfig({
    name: APIName.JOURNAL_LIST,
    method: HttpMethod.GET,
    path: APIPath.JOURNAL_LIST,
  }),
  [APIName.JOURNAL_GET_BY_ID]: createConfig({
    name: APIName.JOURNAL_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.JOURNAL_GET_BY_ID,
  }),
  USER_UPDATE: createConfig({
    name: APIName.USER_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.USER_UPDATE,
  }),
  COMPANY_LIST: createConfig({
    name: APIName.COMPANY_LIST,
    method: HttpMethod.GET,
    path: APIPath.COMPANY_LIST,
  }),
  COMPANY_ADD: createConfig({
    name: APIName.COMPANY_ADD,
    method: HttpMethod.POST,
    path: APIPath.COMPANY_ADD,
  }),
  COMPANY_ADD_BY_INVITATION_CODE: createConfig({
    name: APIName.COMPANY_ADD_BY_INVITATION_CODE,
    method: HttpMethod.PUT,
    path: APIPath.COMPANY_ADD_BY_INVITATION_CODE,
  }),
  PROFIT_GET_INSIGHT: createConfig({
    name: APIName.PROFIT_GET_INSIGHT,
    method: HttpMethod.GET,
    path: APIPath.PROFIT_GET_INSIGHT,
  }),
  INCOME_EXPENSE_GET_TREND_IN_PERIOD: createConfig({
    name: APIName.INCOME_EXPENSE_GET_TREND_IN_PERIOD,
    method: HttpMethod.GET,
    path: APIPath.INCOME_EXPENSE_GET_TREND_IN_PERIOD,
  }),
  PROJECT_LIST_PROGRESS: createConfig({
    name: APIName.PROJECT_LIST_PROGRESS,
    method: HttpMethod.GET,
    path: APIPath.PROJECT_LIST_PROGRESS,
  }),
  PROJECT_LIST_PROFIT_COMPARISON: createConfig({
    name: APIName.PROJECT_LIST_PROFIT_COMPARISON,
    method: HttpMethod.GET,
    path: APIPath.PROJECT_LIST_PROFIT_COMPARISON,
  }),
  ASSET_MANAGEMENT_LIST: createConfig({
    name: APIName.ASSET_MANAGEMENT_LIST,
    method: HttpMethod.GET,
    path: APIPath.ASSET_MANAGEMENT_LIST,
  }),
  ASSET_MANAGEMENT_ADD: createConfig({
    name: APIName.ASSET_MANAGEMENT_ADD,
    method: HttpMethod.POST,
    path: APIPath.ASSET_MANAGEMENT_ADD,
  }),
  ASSET_MANAGEMENT_GET_BY_ID: createConfig({
    name: APIName.ASSET_MANAGEMENT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.ASSET_MANAGEMENT_GET_BY_ID,
  }),
  ASSET_MANAGEMENT_UPDATE: createConfig({
    name: APIName.ASSET_MANAGEMENT_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.ASSET_MANAGEMENT_UPDATE,
  }),
  // Info: (20240720 - Tzuhan)
  // JOURNAL_UPDATE: createConfig({
  //   name: APIName.JOURNAL_UPDATE,
  //   method: HttpMethod.PUT,
  //   path: APIPath.JOURNAL_UPDATE,
  // }),
  JOURNAL_DELETE: createConfig({
    name: APIName.JOURNAL_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.JOURNAL_DELETE,
  }),
  [APIName.COMPANY_SELECT]: createConfig({
    name: APIName.COMPANY_SELECT,
    method: HttpMethod.PUT,
    path: APIPath.COMPANY_SELECT,
  }),
  [APIName.REPORT_LIST]: createConfig({
    name: APIName.REPORT_LIST,
    method: HttpMethod.GET,
    path: APIPath.REPORT_LIST,
  }),
  [APIName.REPORT_GET_BY_ID]: createConfig({
    name: APIName.REPORT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.REPORT_GET_BY_ID,
  }),
  [APIName.REPORT_GENERATE]: createConfig({
    name: APIName.REPORT_GENERATE,
    method: HttpMethod.POST,
    path: APIPath.REPORT_GENERATE,
  }),
  [APIName.LABOR_COST_CHART]: createConfig({
    name: APIName.LABOR_COST_CHART,
    method: HttpMethod.GET,
    path: APIPath.LABOR_COST_CHART,
  }),
  [APIName.OCR_LIST]: createConfig({
    name: APIName.OCR_LIST,
    method: HttpMethod.GET,
    path: APIPath.OCR_LIST,
  }),
  [APIName.STATUS_INFO_GET]: createConfig({
    name: APIName.STATUS_INFO_GET,
    method: HttpMethod.GET,
    path: APIPath.STATUS_INFO_GET,
  }),
  [APIName.ACCOUNT_LIST]: createConfig({
    name: APIName.ACCOUNT_LIST,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_LIST,
  }),
  [APIName.FILE_UPLOAD]: createConfig({
    name: APIName.FILE_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.FILE_UPLOAD,
  }),
  [APIName.PUBLIC_FILE_UPLOAD]: createConfig({
    name: APIName.PUBLIC_FILE_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.PUBLIC_FILE_UPLOAD,
  }),
  [APIName.FILE_DELETE]: createConfig({
    name: APIName.FILE_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.FILE_DELETE,
  }),
  [APIName.FILE_GET]: createConfig({
    name: APIName.FILE_GET,
    method: HttpMethod.GET,
    path: APIPath.FILE_GET,
  }),
  [APIName.COMPANY_GET_BY_ID]: createConfig({
    name: APIName.COMPANY_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.COMPANY_GET_BY_ID,
  }),
  [APIName.COMPANY_UPDATE]: createConfig({
    name: APIName.COMPANY_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.COMPANY_UPDATE,
  }),
  [APIName.COMPANY_DELETE]: createConfig({
    name: APIName.COMPANY_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.COMPANY_DELETE,
  }),
  [APIName.ROLE_GET_BY_ID]: createConfig({
    name: APIName.ROLE_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.ROLE_GET_BY_ID,
  }),
  [APIName.ROLE_LIST]: createConfig({
    name: APIName.ROLE_LIST,
    method: HttpMethod.GET,
    path: APIPath.ROLE_LIST,
  }),
  [APIName.CREATE_ROLE]: createConfig({
    name: APIName.CREATE_ROLE,
    method: HttpMethod.POST,
    path: APIPath.CREATE_ROLE,
  }),
  [APIName.ROLE_SELECT]: createConfig({
    name: APIName.ROLE_SELECT,
    method: HttpMethod.PUT,
    path: APIPath.ROLE_SELECT,
  }),
  [APIName.ROLE_DELETE]: createConfig({
    name: APIName.ROLE_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.ROLE_DELETE,
  }),
  [APIName.ROLE_UPDATE]: createConfig({
    name: APIName.ROLE_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.ROLE_UPDATE,
  }),
  [APIName.NEWS_LIST]: createConfig({
    name: APIName.NEWS_LIST,
    method: HttpMethod.GET,
    path: APIPath.NEWS_LIST,
  }),
  [APIName.CREATE_NEWS]: createConfig({
    name: APIName.CREATE_NEWS,
    method: HttpMethod.POST,
    path: APIPath.CREATE_NEWS,
  }),
  [APIName.KYC_UPLOAD]: createConfig({
    name: APIName.KYC_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.KYC_UPLOAD,
  }),
  [APIName.ACCOUNT_GET_BY_ID]: createConfig({
    name: APIName.ACCOUNT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_GET_BY_ID,
  }),
  [APIName.CREATE_NEW_SUB_ACCOUNT]: createConfig({
    name: APIName.CREATE_NEW_SUB_ACCOUNT,
    method: HttpMethod.POST,
    path: APIPath.CREATE_NEW_SUB_ACCOUNT,
  }),
  [APIName.UPDATE_ACCOUNT_INFO_BY_ID]: createConfig({
    name: APIName.UPDATE_ACCOUNT_INFO_BY_ID,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_ACCOUNT_INFO_BY_ID,
  }),
  [APIName.DELETE_ACCOUNT_BY_ID]: createConfig({
    name: APIName.DELETE_ACCOUNT_BY_ID,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_ACCOUNT_BY_ID,
  }),
  [APIName.TRANSFER_OWNER]: createConfig({
    name: APIName.TRANSFER_OWNER,
    method: HttpMethod.PUT,
    path: APIPath.TRANSFER_OWNER,
  }),
  [APIName.PROJECT_LIST]: createConfig({
    name: APIName.PROJECT_LIST,
    method: HttpMethod.GET,
    path: APIPath.PROJECT_LIST,
  }),
  [APIName.CREATE_PROJECT]: createConfig({
    name: APIName.CREATE_PROJECT,
    method: HttpMethod.POST,
    path: APIPath.CREATE_PROJECT,
  }),
  [APIName.GET_PROJECT_BY_ID]: createConfig({
    name: APIName.GET_PROJECT_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.GET_PROJECT_BY_ID,
  }),
  [APIName.UPDATE_PROJECT_BY_ID]: createConfig({
    name: APIName.UPDATE_PROJECT_BY_ID,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_PROJECT_BY_ID,
  }),
  [APIName.PUBLIC_KEY_GET]: createConfig({
    name: APIName.PUBLIC_KEY_GET,
    method: HttpMethod.GET,
    path: APIPath.PUBLIC_KEY_GET,
  }),
  [APIName.CERTIFICATE_LIST]: createConfig({
    name: APIName.CERTIFICATE_LIST,
    method: HttpMethod.GET,
    path: APIPath.CERTIFICATE_LIST,
  }),
  [APIName.PUSHER]: createConfig({
    name: APIName.PUSHER,
    method: HttpMethod.POST,
    path: APIPath.PUSHER,
  }),
  [APIName.ENCRYPT]: createConfig({
    name: APIName.ENCRYPT,
    method: HttpMethod.POST,
    path: APIPath.ENCRYPT,
  }),
  [APIName.DECRYPT]: createConfig({
    name: APIName.DECRYPT,
    method: HttpMethod.POST,
    path: APIPath.DECRYPT,
  }),
  [APIName.VOUCHER_GET_BY_ID_V2]: createConfig({
    name: APIName.VOUCHER_GET_BY_ID_V2,
    method: HttpMethod.GET,
    path: APIPath.VOUCHER_GET_BY_ID_V2,
  }),
  /**
   * Info: (20241007 - Murky)
   * Below is v2 API
   */
  [APIName.REPORT_GET_V2]: createConfig({
    name: APIName.REPORT_GET_V2,
    method: HttpMethod.GET,
    path: APIPath.REPORT_GET_V2,
  }),
  [APIName.ASSET_GET_BY_ID_V2]: createConfig({
    name: APIName.ASSET_GET_BY_ID_V2,
    method: HttpMethod.GET,
    path: APIPath.ASSET_GET_BY_ID_V2,
  }),
  [APIName.ASK_AI_V2]: createConfig({
    name: APIName.ASK_AI_V2,
    method: HttpMethod.GET,
    path: APIPath.ASK_AI_V2,
  }),
  [APIName.VOUCHER_LIST_V2]: createConfig({
    name: APIName.VOUCHER_LIST_V2,
    method: HttpMethod.GET,
    path: APIPath.VOUCHER_LIST_V2,
  }),
};
