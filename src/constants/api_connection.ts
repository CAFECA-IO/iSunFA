import { IAPIConfig, IAPIInput, IAPIName, IAPIOutput } from '@/interfaces/api_connection';

const apiVersion = 'v1';
const apiPrefix = `/api/${apiVersion}`;

const apiVersionV2 = 'v2';
const apiPrefixV2 = `/api/${apiVersionV2}`;

const apiPayment = `/api/payment`;

const initialInput: IAPIInput = {
  header: {},
  body: {},
  params: {},
  query: {},
};

export enum HttpMethod {
  GET = 'GET',
  POST = 'POST',
  PUT = 'PUT',
  DELETE = 'DELETE',
  PATCH = 'PATCH',
  HEAD = 'HEAD',
}

export enum APIName {
  AGREE_TO_TERMS = 'AGREE_TO_TERMS',
  SIGN_IN = 'SIGN_IN',
  SIGN_OUT = 'SIGN_OUT',
  EMAIL = 'EMAIL',
  USER_LIST = 'USER_LIST',
  USER_GET_BY_ID = 'USER_GET_BY_ID',
  USER_UPDATE = 'USER_UPDATE',
  USER_PENDING_TASK_GET = 'USER_PENDING_TASK_GET',
  ACCOUNT_BOOK_PENDING_TASK_GET = 'ACCOUNT_BOOK_PENDING_TASK_GET',
  ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID = 'ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID',
  INPUT_CERTIFICATE_LIST = 'INPUT_CERTIFICATE_LIST',
  OUTPUT_CERTIFICATE_LIST = 'OUTPUT_CERTIFICATE_LIST',
  CERTIFICATE_LIST_V2 = 'CERTIFICATE_LIST_V2', // Deprecated: (20250424 - Tzuhan) remove in the future
  CERTIFICATE_GET_V2 = 'CERTIFICATE_GET_V2',
  CERTIFICATE_POST_V2 = 'CERTIFICATE_POST_V2',
  CERTIFICATE_PUT_V2 = 'CERTIFICATE_PUT_V2',
  INVOICE_POST_V2 = 'INVOICE_POST_V2',
  INVOICE_PUT_V2 = 'INVOICE_PUT_V2',
  CERTIFICATE_DELETE_V2 = 'CERTIFICATE_DELETE_V2',
  CERTIFICATE_DELETE_MULTIPLE_V2 = 'CERTIFICATE_DELETE_MULTIPLE_V2',
  COUNTERPARTY_LIST = 'COUNTERPARTY_LIST',
  COUNTERPARTY_GET_BY_ID = 'COUNTERPARTY_GET_BY_ID',
  COUNTERPARTY_ADD = 'COUNTERPARTY_ADD',
  COUNTERPARTY_UPDATE = 'COUNTERPARTY_UPDATE',
  COUNTERPARTY_DELETE = 'COUNTERPARTY_DELETE',
  IMAGE_GET_BY_ID = 'IMAGE_GET_BY_ID',
  ASK_AI_STATUS = 'ASK_AI_STATUS',
  ASK_AI_V2 = 'ASK_AI_V2',
  ASK_AI_RESULT_V2 = 'ASK_AI_RESULT_V2',
  VOUCHER_LIST_V2 = 'VOUCHER_LIST_V2',
  VOUCHER_POST_V2 = 'VOUCHER_POST_V2',
  VOUCHER_GET_BY_ID_V2 = 'VOUCHER_GET_BY_ID_V2',
  VOUCHER_DELETE_V2 = 'VOUCHER_DELETE_V2',
  VOUCHER_WAS_READ_V2 = 'VOUCHER_WAS_READ_V2',
  VOUCHER_PUT_V2 = 'VOUCHER_PUT_V2',
  VOUCHER_RESTORE_V2 = 'VOUCHER_RESTORE_V2',
  REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2 = 'REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2',
  VOUCHER_LIST_GET_BY_ACCOUNT_V2 = 'VOUCHER_LIST_GET_BY_ACCOUNT_V2',
  JOURNAL_LIST = 'JOURNAL_LIST',
  REPORT_LIST = 'REPORT_LIST',
  REPORT_GET_BY_ID = 'REPORT_GET_BY_ID',
  REPORT_GET_V2 = 'REPORT_GET_V2',
  REPORT_GENERATE = 'REPORT_GENERATE',
  ROOM_ADD = 'ROOM_ADD',
  ROOM_GET_BY_ID = 'ROOM_GET_BY_ID',
  ROOM_GET_PUBLIC_KEY_BY_ID = 'ROOM_GET_PUBLIC_KEY_BY_ID',
  ROOM_DELETE = 'ROOM_DELETE',
  STATUS_INFO_GET = 'STATUS_INFO_GET',
  ACCOUNT_LIST = 'ACCOUNT_LIST',
  FILE_UPLOAD = 'FILE_UPLOAD',
  FILE_DELETE = 'FILE_DELETE',
  FILE_DELETE_V2 = 'FILE_DELETE_V2',
  FILE_GET = 'FILE_GET',
  FILE_PUT_V2 = 'FILE_PUT_V2',
  USER_ROLE_LIST = 'USER_ROLE_LIST', // Info: (20241120 - Liz) Beta
  USER_CREATE_ROLE = 'USER_CREATE_ROLE',
  USER_SELECT_ROLE = 'USER_SELECT_ROLE',
  CREATE_ACCOUNT_BOOK = 'CREATE_ACCOUNT_BOOK',
  DELETE_ACCOUNT_BOOK = 'DELETE_ACCOUNT_BOOK',
  ROLE_LIST = 'ROLE_LIST',
  NEWS_LIST = 'NEWS_LIST',
  CREATE_NEWS = 'CREATE_NEWS',
  NEWS_GET_BY_ID = 'NEWS_GET_BY_ID',
  KYC_UPLOAD = 'KYC_UPLOAD',
  ACCOUNT_GET_BY_ID = 'ACCOUNT_GET_BY_ID',
  CREATE_NEW_SUB_ACCOUNT = 'CREATE_NEW_SUB_ACCOUNT',
  UPDATE_ACCOUNT_INFO_BY_ID = 'UPDATE_ACCOUNT_INFO_BY_ID',
  DELETE_ACCOUNT_BY_ID = 'DELETE_ACCOUNT_BY_ID',
  TODO_LIST = 'TODO_LIST',
  CREATE_TODO = 'CREATE_TODO',
  TODO_GET_BY_ID = 'TODO_GET_BY_ID',
  UPDATE_TODO = 'UPDATE_TODO',
  DELETE_TODO = 'DELETE_TODO',
  PUBLIC_KEY_GET = 'PUBLIC_KEY_GET',
  ZOD_EXAMPLE = 'ZOD_EXAMPLE', // Info: (20240909 - Murky) This is a Zod example, to demonstrate how to use Zod schema to validate data.
  CERTIFICATE_LIST = 'CERTIFICATE_LIST', // Deprecated: (20241122 - tzuhan) remove test api
  ASSET_LIST_V2 = 'ASSET_LIST_V2',
  ASSET_GET_BY_ID_V2 = 'ASSET_GET_BY_ID_V2',
  ACCOUNTING_SETTING_GET = 'ACCOUNTING_SETTING_GET',
  ACCOUNTING_SETTING_UPDATE = 'ACCOUNTING_SETTING_UPDATE',
  USER_SETTING_GET = 'USER_SETTING_GET',
  USER_SETTING_UPDATE = 'USER_SETTING_UPDATE',
  USER_ACTION_LOG_LIST = 'USER_ACTION_LOG_LIST',
  CREATE_ASSET_V2 = 'CREATE_ASSET_V2',
  DELETE_ASSET_V2 = 'DELETE_ASSET_V2',
  UPDATE_ASSET_V2 = 'UPDATE_ASSET_V2',
  TRIAL_BALANCE_LIST = 'TRIAL_BALANCE_LIST',
  ASSET_LIST_EXPORT = 'ASSET_LIST_EXPORT',
  FILE_EXPORT = 'FILE_EXPORT',
  LEDGER_LIST = 'LEDGER_LIST',
  PUSHER_AUTH = 'PUSHER_AUTH',
  TRIAL_BALANCE_EXPORT = 'TRIAL_BALANCE_EXPORT',
  CREATE_ASSET_BULK = 'CREATE_ASSET_BULK',
  LEDGER_EXPORT = 'LEDGER_EXPORT',
  LIST_LOGIN_DEVICE = 'LIST_LOGIN_DEVICE',
  REMOVE_LOGIN_DEVICE = 'REMOVE_LOGIN_DEVICE',
  CREATE_TEAM = 'CREATE_TEAM',
  LIST_TEAM = 'LIST_TEAM',
  GET_TEAM_BY_ID = 'GET_TEAM_BY_ID',
  LIST_ACCOUNT_BOOK_BY_TEAM_ID = 'LIST_ACCOUNT_BOOK_BY_TEAM_ID',
  LIST_MEMBER_BY_TEAM_ID = 'LIST_MEMBER_BY_TEAM_ID',
  ADD_MEMBER_TO_TEAM = 'ADD_MEMBER_TO_TEAM',
  LIST_TEAM_SUBSCRIPTION = 'LIST_TEAM_SUBSCRIPTION',
  GET_SUBSCRIPTION_BY_TEAM_ID = 'GET_SUBSCRIPTION_BY_TEAM_ID',
  UPDATE_SUBSCRIPTION = 'UPDATE_SUBSCRIPTION',
  LIST_TEAM_INVOICE = 'LIST_TEAM_INVOICE',
  GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID = 'GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID',
  GET_CREDIT_CARD_INFO = 'GET_CREDIT_CARD_INFO',
  LEAVE_TEAM = 'LEAVE_TEAM',
  REQUEST_TRANSFER_ACCOUNT_BOOK = 'REQUEST_TRANSFER_ACCOUNT_BOOK',
  CANCEL_TRANSFER_ACCOUNT_BOOK = 'CANCEL_TRANSFER_ACCOUNT_BOOK',
  ACCEPT_TRANSFER_ACCOUNT_BOOK = 'ACCEPT_TRANSFER_ACCOUNT_BOOK',
  DECLINE_TRANSFER_ACCOUNT_BOOK = 'DECLINE_TRANSFER_ACCOUNT_BOOK',
  LIST_PAYMENT_PLAN = 'LIST_PAYMENT_PLAN',
  LIST_ACCOUNT_BOOK_BY_USER_ID = 'LIST_ACCOUNT_BOOK_BY_USER_ID',
  CONNECT_ACCOUNT_BOOK_BY_ID = 'CONNECT_ACCOUNT_BOOK_BY_ID',
  UPDATE_TEAM_BY_ID = 'UPDATE_TEAM_BY_ID',
  UPDATE_MEMBER = 'UPDATE_MEMBER',
  DELETE_MEMBER = 'DELETE_MEMBER',
  GET_ACCOUNT_BOOK_INFO_BY_ID = 'GET_ACCOUNT_BOOK_INFO_BY_ID',
  PUT_TEAM_ICON = 'PUT_TEAM_ICON',
  UPDATE_ACCOUNT_BOOK = 'UPDATE_ACCOUNT_BOOK',
  USER_PAYMENT_METHOD_LIST = 'USER_PAYMENT_METHOD_LIST',
  USER_PAYMENT_METHOD_CHARGE = 'USER_PAYMENT_METHOD_CHARGE',
  PAYMENT_METHOD_REGISTER_REDIRECT = 'PAYMENT_METHOD_REGISTER_REDIRECT',
  PAYMENT_METHOD_REGISTER_CALLBACK_OEN = 'PAYMENT_METHOD_REGISTER_CALLBACK_OEN',
  UPDATE_ACCOUNT_BOOK_INFO = 'UPDATE_ACCOUNT_BOOK_INFO',
  DISCONNECT_ACCOUNT_BOOK = 'DISCONNECT_ACCOUNT_BOOK',
  LIST_ACCOUNT_BOOK_INFO_BY_USER_ID = 'LIST_ACCOUNT_BOOK_INFO_BY_USER_ID',
  ACCOUNT_BOOK_PUT_ICON = 'ACCOUNT_BOOK_PUT_ICON',
}

export enum APIPath {
  AGREE_TO_TERMS = `${apiPrefix}/user/:userId/agreement`, // Info: (20250326 - Tzuhan) 有 v2 的版本，但是目前沒有使用
  SIGN_IN = `${apiPrefix}/sign_in`,
  SIGN_OUT = `/api/auth/signout`,
  EMAIL = `${apiPrefix}/email`,
  USER_LIST = `${apiPrefixV2}/user`,
  USER_GET_BY_ID = `${apiPrefixV2}/user/:userId`,
  USER_UPDATE = `${apiPrefixV2}/user/:userId`,
  USER_PENDING_TASK_GET = `${apiPrefixV2}/user/:userId/pending_task`,
  ACCOUNT_BOOK_PENDING_TASK_GET = `${apiPrefixV2}/account_book/:accountBookId/pending_task`,
  ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID = `${apiPrefixV2}/account_book/search`,
  CERTIFICATE_LIST_V2 = `${apiPrefixV2}/company/:companyId/certificate`, // Deprecated: (20250424 - Tzuhan) remove in the future
  INPUT_CERTIFICATE_LIST = `${apiPrefix}/company/:companyId/certificate/input`,
  OUTPUT_CERTIFICATE_LIST = `${apiPrefix}/company/:companyId/certificate/output`,
  CERTIFICATE_GET_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  CERTIFICATE_POST_V2 = `${apiPrefixV2}/company/:companyId/certificate`,
  CERTIFICATE_PUT_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  INVOICE_POST_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId/invoice`,
  INVOICE_PUT_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId/invoice/:invoiceId`,
  CERTIFICATE_DELETE_V2 = `${apiPrefixV2}/company/:companyId/certificate/:certificateId`,
  CERTIFICATE_DELETE_MULTIPLE_V2 = `${apiPrefixV2}/company/:companyId/certificate`,
  COUNTERPARTY_LIST = `${apiPrefixV2}/company/:companyId/counterparty`,
  COUNTERPARTY_ADD = `${apiPrefixV2}/company/:companyId/counterparty`,
  COUNTERPARTY_GET_BY_ID = `${apiPrefixV2}/counterparty/:counterpartyId`,
  COUNTERPARTY_UPDATE = `${apiPrefixV2}/counterparty/:counterpartyId`,
  COUNTERPARTY_DELETE = `${apiPrefixV2}/counterparty/:counterpartyId`,

  IMAGE_GET_BY_ID = `${apiPrefixV2}/image/:imageId`,
  ASK_AI_STATUS = `${apiPrefix}/company/:companyId/ask_ai/:resultId/status`,
  ASK_AI_V2 = `${apiPrefixV2}/ask_ai`,
  ASK_AI_RESULT_V2 = `${apiPrefixV2}/ask_ai/:resultId`,
  VOUCHER_LIST_V2 = `${apiPrefixV2}/company/:companyId/voucher`,
  VOUCHER_POST_V2 = `${apiPrefixV2}/company/:companyId/voucher`,
  VOUCHER_GET_BY_ID_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_DELETE_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_WAS_READ_V2 = `${apiPrefixV2}/company/:companyId/voucher/read`,
  JOURNAL_LIST = `${apiPrefix}/company/:companyId/journal`,
  REPORT_LIST = `${apiPrefix}/company/:companyId/report`,
  REPORT_GET_BY_ID = `${apiPrefixV2}/company/:companyId/report/public/:reportId`,
  REPORT_GET_V2 = `${apiPrefixV2}/company/:companyId/report`,
  REPORT_GENERATE = `${apiPrefixV2}/company/:companyId/report/public`,
  ROOM_ADD = `${apiPrefixV2}/room`,
  ROOM_GET_BY_ID = `${apiPrefixV2}/room/:roomId`,
  ROOM_GET_PUBLIC_KEY_BY_ID = `${apiPrefixV2}/room/:roomId/key`,
  ROOM_DELETE = `${apiPrefixV2}/room/:roomId`,
  STATUS_INFO_GET = `${apiPrefixV2}/status_info`,
  ACCOUNT_LIST = `${apiPrefixV2}/company/:companyId/account`,
  FILE_UPLOAD = `${apiPrefixV2}/file`,
  FILE_DELETE = `${apiPrefix}/company/:companyId/file/:fileId`, // Info: (20250325 - Tzuhan) 有 v2 的版本，但是目前沒有使用
  FILE_DELETE_V2 = `${apiPrefixV2}/file/:fileId`,
  FILE_GET = `${apiPrefix}/company/:companyId/file/:fileId`, // Info: (20250325 - Tzuhan) 有 v2 的版本，但是目前沒有使用
  FILE_PUT_V2 = `${apiPrefixV2}/file/:fileId`,
  USER_ROLE_LIST = `${apiPrefixV2}/user/:userId/role`,
  USER_CREATE_ROLE = `${apiPrefixV2}/user/:userId/role`,
  USER_SELECT_ROLE = `${apiPrefixV2}/user/:userId/selected_role`,
  CREATE_ACCOUNT_BOOK = `${apiPrefixV2}/user/:userId/account_book`,
  ROLE_LIST = `${apiPrefixV2}/role`,
  NEWS_LIST = `${apiPrefixV2}/news`,
  CREATE_NEWS = `${apiPrefixV2}/news`,
  NEWS_GET_BY_ID = `${apiPrefixV2}/news/:newsId`,
  KYC_UPLOAD = `${apiPrefixV2}/company/:companyId/kyc`,
  CREATE_NEW_SUB_ACCOUNT = `${apiPrefixV2}/company/:companyId/account`,
  TODO_LIST = `${apiPrefixV2}/user/:userId/todo`,
  CREATE_TODO = `${apiPrefixV2}/user/:userId/todo`,
  TODO_GET_BY_ID = `${apiPrefixV2}/todo/:todoId`,
  UPDATE_TODO = `${apiPrefixV2}/todo/:todoId`,
  DELETE_TODO = `${apiPrefixV2}/todo/:todoId`,
  ZOD_EXAMPLE = `${apiPrefix}/company/zod`, // Info: (20240909 - Murky) This is a Zod example, to demonstrate how to use Zod schema to validate data.
  UPDATE_ACCOUNT_INFO_BY_ID = `${apiPrefixV2}/account_book/:accountBookId/account/:accountId`,
  DELETE_ACCOUNT_BY_ID = `${apiPrefixV2}/account_book/:accountBookId/account/:accountId`,
  CERTIFICATE_LIST = `${apiPrefix}/company/:companyId/certificate`,
  PUBLIC_KEY_GET = `${apiPrefix}/company/:companyId/public_key`,
  ACCOUNT_GET_BY_ID = `${apiPrefix}/company/:companyId/account/:accountId`,
  ASSET_LIST_V2 = `${apiPrefixV2}/account_book/:accountBookId/asset`,
  ASSET_GET_BY_ID_V2 = `${apiPrefixV2}/account_book/:accountBookId/asset/:assetId`,
  ACCOUNTING_SETTING_GET = `${apiPrefixV2}/company/:companyId/accounting_setting`,
  ACCOUNTING_SETTING_UPDATE = `${apiPrefixV2}/company/:companyId/accounting_setting`,
  USER_SETTING_GET = `${apiPrefixV2}/user/:userId/setting`,
  USER_SETTING_UPDATE = `${apiPrefixV2}/user/:userId/setting`,
  USER_ACTION_LOG_LIST = `${apiPrefixV2}/user/:userId/action_log`,
  CREATE_ASSET_V2 = `${apiPrefixV2}/account_book/:accountBookId/asset`,
  DELETE_ASSET_V2 = `${apiPrefixV2}/account_book/:accountBookId/asset/:assetId`,
  UPDATE_ASSET_V2 = `${apiPrefixV2}/account_book/:accountBookId/asset/:assetId`,
  TRIAL_BALANCE_LIST = `${apiPrefixV2}/account_book/:accountBookId/trial_balance`,
  ASSET_LIST_EXPORT = `${apiPrefixV2}/account_book/:accountBookId/asset/export`,
  FILE_EXPORT = `${apiPrefixV2}/account_book/:accountBookId/asset/export`,
  LEDGER_LIST = `${apiPrefixV2}/account_book/:accountBookId/ledger`,
  PUSHER_AUTH = `${apiPrefixV2}/pusher/auth`,
  TRIAL_BALANCE_EXPORT = `${apiPrefixV2}/account_book/:accountBookId/trial_balance/export`,
  CREATE_ASSET_BULK = `${apiPrefixV2}/account_book/:accountBookId/asset/bulk`,
  LEDGER_EXPORT = `${apiPrefixV2}/account_book/:accountBookId/ledger/export`,
  LIST_LOGIN_DEVICE = `${apiPrefixV2}/user/:userId/device`,
  REMOVE_LOGIN_DEVICE = `${apiPrefixV2}/user/:userId/device/:deviceId`,
  CREATE_TEAM = `${apiPrefixV2}/team`,
  LIST_TEAM = `${apiPrefixV2}/user/:userId/team`,
  GET_TEAM_BY_ID = `${apiPrefixV2}/team/:teamId`,
  LIST_ACCOUNT_BOOK_BY_TEAM_ID = `${apiPrefixV2}/team/:teamId/account_book`,
  LIST_MEMBER_BY_TEAM_ID = `${apiPrefixV2}/team/:teamId/member`,
  ADD_MEMBER_TO_TEAM = `${apiPrefixV2}/team/:teamId/member`,
  LIST_TEAM_SUBSCRIPTION = `${apiPrefixV2}/subscription`,
  GET_SUBSCRIPTION_BY_TEAM_ID = `${apiPrefixV2}/subscription/:teamId`,
  UPDATE_SUBSCRIPTION = `${apiPrefixV2}/subscription/:teamId/subscription`,
  LIST_TEAM_INVOICE = `${apiPrefixV2}/subscription/:teamId/invoice`,
  GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID = `${apiPrefixV2}/subscription/:teamId/invoice/:invoiceId`,
  GET_CREDIT_CARD_INFO = `${apiPrefixV2}/team/:teamId/payment_method`,
  LEAVE_TEAM = `${apiPrefixV2}/team/:teamId/leave`,
  REQUEST_TRANSFER_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId/transfer`,
  CANCEL_TRANSFER_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId/cancel`,
  ACCEPT_TRANSFER_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId/accept`,
  DECLINE_TRANSFER_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId/decline`,
  LIST_PAYMENT_PLAN = `${apiPrefixV2}/payment_plan`,
  LIST_ACCOUNT_BOOK_BY_USER_ID = `${apiPrefixV2}/user/:userId/account_book`,
  CONNECT_ACCOUNT_BOOK_BY_ID = `${apiPrefixV2}/account_book/:accountBookId/connect`,

  UPDATE_TEAM_BY_ID = `${apiPrefixV2}/team/:teamId`,
  UPDATE_MEMBER = `${apiPrefixV2}/team/:teamId/member/:memberId`,
  DELETE_MEMBER = `${apiPrefixV2}/team/:teamId/member/:memberId`,
  GET_ACCOUNT_BOOK_INFO_BY_ID = `${apiPrefixV2}/account_book/:accountBookId/info`,
  PUT_TEAM_ICON = `${apiPrefixV2}/team/:teamId/icon`,
  VOUCHER_PUT_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId`,
  VOUCHER_RESTORE_V2 = `${apiPrefixV2}/company/:companyId/voucher/:voucherId/restore`,
  REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2 = `${apiPrefixV2}/company/:companyId/account/:accountId/lineitem`,
  VOUCHER_LIST_GET_BY_ACCOUNT_V2 = `${apiPrefixV2}/company/:companyId/account/:accountId/voucher`,
  UPDATE_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId`,
  DELETE_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId`, // Info: (20250418 - Liz) 新版刪除帳本 api
  USER_PAYMENT_METHOD_LIST = `${apiPrefixV2}/user/:userId/payment_method`,
  USER_PAYMENT_METHOD_CHARGE = `${apiPrefixV2}/user/:userId/payment_method/:paymentMethodId/charge`,
  PAYMENT_METHOD_REGISTER_REDIRECT = `${apiPayment}/`,
  PAYMENT_METHOD_REGISTER_CALLBACK_OEN = `${apiPayment}/callback/oen`,
  UPDATE_ACCOUNT_BOOK_INFO = `${apiPrefixV2}/account_book/:accountBookId/info`,
  DISCONNECT_ACCOUNT_BOOK = `${apiPrefixV2}/account_book/:accountBookId/disconnect`,
  LIST_ACCOUNT_BOOK_INFO_BY_USER_ID = `${apiPrefixV2}/user/:userId/account_book/info`,
  ACCOUNT_BOOK_PUT_ICON = `${apiPrefixV2}/account_book/:accountBookId/icon`,
}

const createConfig = ({
  name,
  method,
  path,
  input = initialInput,
  output = {},
  useWorker = false,
}: {
  name: IAPIName;
  method: HttpMethod;
  path: APIPath;
  input?: IAPIInput;
  output?: IAPIOutput;
  useWorker?: boolean;
}): IAPIConfig => ({
  name,
  method,
  path,
  input,
  output,
  useWorker,
});

export const APIConfig: Record<IAPIName, IAPIConfig> = {
  [APIName.AGREE_TO_TERMS]: createConfig({
    name: APIName.AGREE_TO_TERMS,
    method: HttpMethod.POST,
    path: APIPath.AGREE_TO_TERMS,
  }),
  [APIName.SIGN_IN]: createConfig({
    name: APIName.SIGN_IN,
    method: HttpMethod.POST,
    path: APIPath.SIGN_IN,
  }),
  [APIName.SIGN_OUT]: createConfig({
    name: APIName.SIGN_OUT,
    method: HttpMethod.POST,
    path: APIPath.SIGN_OUT,
  }),
  [APIName.EMAIL]: createConfig({
    name: APIName.EMAIL,
    method: HttpMethod.POST,
    path: APIPath.EMAIL,
  }),
  [APIName.USER_LIST]: createConfig({
    name: APIName.USER_LIST,
    method: HttpMethod.GET,
    path: APIPath.USER_LIST,
  }),
  [APIName.USER_GET_BY_ID]: createConfig({
    name: APIName.USER_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.USER_GET_BY_ID,
  }),
  [APIName.USER_UPDATE]: createConfig({
    name: APIName.USER_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.USER_UPDATE,
  }),
  [APIName.USER_PENDING_TASK_GET]: createConfig({
    name: APIName.USER_PENDING_TASK_GET,
    method: HttpMethod.GET,
    path: APIPath.USER_PENDING_TASK_GET,
  }),
  [APIName.ACCOUNT_BOOK_PENDING_TASK_GET]: createConfig({
    name: APIName.ACCOUNT_BOOK_PENDING_TASK_GET,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_BOOK_PENDING_TASK_GET,
  }),
  [APIName.IMAGE_GET_BY_ID]: createConfig({
    name: APIName.IMAGE_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.IMAGE_GET_BY_ID,
  }),
  [APIName.ASK_AI_STATUS]: createConfig({
    name: APIName.ASK_AI_STATUS,
    method: HttpMethod.GET,
    path: APIPath.ASK_AI_STATUS,
  }),
  [APIName.VOUCHER_PUT_V2]: createConfig({
    name: APIName.VOUCHER_PUT_V2,
    method: HttpMethod.PUT,
    path: APIPath.VOUCHER_PUT_V2,
  }),
  [APIName.JOURNAL_LIST]: createConfig({
    name: APIName.JOURNAL_LIST,
    method: HttpMethod.GET,
    path: APIPath.JOURNAL_LIST,
  }),
  [APIName.ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID]: createConfig({
    name: APIName.ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_BOOK_SEARCH_BY_NAME_OR_TAX_ID,
  }),
  [APIName.REPORT_LIST]: createConfig({
    name: APIName.REPORT_LIST,
    method: HttpMethod.GET,
    path: APIPath.REPORT_LIST,
  }),
  [APIName.REPORT_GET_BY_ID]: createConfig({
    name: APIName.REPORT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.REPORT_GET_BY_ID,
  }),
  [APIName.REPORT_GENERATE]: createConfig({
    name: APIName.REPORT_GENERATE,
    method: HttpMethod.POST,
    path: APIPath.REPORT_GENERATE,
  }),
  [APIName.ROOM_ADD]: createConfig({
    name: APIName.ROOM_ADD,
    method: HttpMethod.POST,
    path: APIPath.ROOM_ADD,
  }),
  [APIName.ROOM_GET_BY_ID]: createConfig({
    name: APIName.ROOM_GET_BY_ID,
    method: HttpMethod.POST,
    path: APIPath.ROOM_GET_BY_ID,
  }),
  [APIName.ROOM_DELETE]: createConfig({
    name: APIName.ROOM_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.ROOM_DELETE,
  }),
  [APIName.ROOM_GET_PUBLIC_KEY_BY_ID]: createConfig({
    name: APIName.ROOM_GET_PUBLIC_KEY_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.ROOM_GET_PUBLIC_KEY_BY_ID,
  }),
  [APIName.STATUS_INFO_GET]: createConfig({
    name: APIName.STATUS_INFO_GET,
    method: HttpMethod.GET,
    path: APIPath.STATUS_INFO_GET,
  }),
  [APIName.ACCOUNT_LIST]: createConfig({
    name: APIName.ACCOUNT_LIST,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_LIST,
  }),
  [APIName.FILE_UPLOAD]: createConfig({
    name: APIName.FILE_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.FILE_UPLOAD,
  }),
  [APIName.FILE_DELETE]: createConfig({
    name: APIName.FILE_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.FILE_DELETE,
  }),
  [APIName.FILE_DELETE_V2]: createConfig({
    name: APIName.FILE_DELETE_V2,
    method: HttpMethod.DELETE,
    path: APIPath.FILE_DELETE_V2,
  }),
  [APIName.FILE_GET]: createConfig({
    name: APIName.FILE_GET,
    method: HttpMethod.GET,
    path: APIPath.FILE_GET,
  }),
  [APIName.FILE_PUT_V2]: createConfig({
    name: APIName.FILE_PUT_V2,
    method: HttpMethod.PUT,
    path: APIPath.FILE_PUT_V2,
  }),
  [APIName.DELETE_ACCOUNT_BOOK]: createConfig({
    name: APIName.DELETE_ACCOUNT_BOOK,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_ACCOUNT_BOOK,
  }),
  [APIName.ROLE_LIST]: createConfig({
    name: APIName.ROLE_LIST,
    method: HttpMethod.GET,
    path: APIPath.ROLE_LIST,
  }),
  [APIName.USER_ROLE_LIST]: createConfig({
    name: APIName.USER_ROLE_LIST,
    method: HttpMethod.GET,
    path: APIPath.USER_ROLE_LIST,
  }),
  [APIName.USER_CREATE_ROLE]: createConfig({
    name: APIName.USER_CREATE_ROLE,
    method: HttpMethod.POST,
    path: APIPath.USER_CREATE_ROLE,
  }),
  [APIName.USER_SELECT_ROLE]: createConfig({
    name: APIName.USER_SELECT_ROLE,
    method: HttpMethod.PUT,
    path: APIPath.USER_SELECT_ROLE,
  }),
  [APIName.CREATE_ACCOUNT_BOOK]: createConfig({
    name: APIName.CREATE_ACCOUNT_BOOK,
    method: HttpMethod.POST,
    path: APIPath.CREATE_ACCOUNT_BOOK,
  }),
  [APIName.NEWS_LIST]: createConfig({
    name: APIName.NEWS_LIST,
    method: HttpMethod.GET,
    path: APIPath.NEWS_LIST,
  }),
  [APIName.CREATE_NEWS]: createConfig({
    name: APIName.CREATE_NEWS,
    method: HttpMethod.POST,
    path: APIPath.CREATE_NEWS,
  }),
  [APIName.NEWS_GET_BY_ID]: createConfig({
    name: APIName.NEWS_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.NEWS_GET_BY_ID,
  }),
  [APIName.KYC_UPLOAD]: createConfig({
    name: APIName.KYC_UPLOAD,
    method: HttpMethod.POST,
    path: APIPath.KYC_UPLOAD,
  }),
  [APIName.ACCOUNT_GET_BY_ID]: createConfig({
    name: APIName.ACCOUNT_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNT_GET_BY_ID,
  }),
  [APIName.CREATE_NEW_SUB_ACCOUNT]: createConfig({
    name: APIName.CREATE_NEW_SUB_ACCOUNT,
    method: HttpMethod.POST,
    path: APIPath.CREATE_NEW_SUB_ACCOUNT,
  }),
  [APIName.UPDATE_ACCOUNT_INFO_BY_ID]: createConfig({
    name: APIName.UPDATE_ACCOUNT_INFO_BY_ID,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_ACCOUNT_INFO_BY_ID,
  }),
  [APIName.DELETE_ACCOUNT_BY_ID]: createConfig({
    name: APIName.DELETE_ACCOUNT_BY_ID,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_ACCOUNT_BY_ID,
  }),
  [APIName.TODO_LIST]: createConfig({
    name: APIName.TODO_LIST,
    method: HttpMethod.GET,
    path: APIPath.TODO_LIST,
  }),
  [APIName.CREATE_TODO]: createConfig({
    name: APIName.CREATE_TODO,
    method: HttpMethod.POST,
    path: APIPath.CREATE_TODO,
  }),
  [APIName.TODO_GET_BY_ID]: createConfig({
    name: APIName.TODO_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.TODO_GET_BY_ID,
  }),
  [APIName.UPDATE_TODO]: createConfig({
    name: APIName.UPDATE_TODO,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_TODO,
  }),
  [APIName.DELETE_TODO]: createConfig({
    name: APIName.DELETE_TODO,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_TODO,
  }),
  [APIName.PUBLIC_KEY_GET]: createConfig({
    name: APIName.PUBLIC_KEY_GET,
    method: HttpMethod.GET,
    path: APIPath.PUBLIC_KEY_GET,
  }),
  [APIName.CERTIFICATE_LIST]: createConfig({
    name: APIName.CERTIFICATE_LIST,
    method: HttpMethod.GET,
    path: APIPath.CERTIFICATE_LIST,
  }),
  [APIName.VOUCHER_GET_BY_ID_V2]: createConfig({
    name: APIName.VOUCHER_GET_BY_ID_V2,
    method: HttpMethod.GET,
    path: APIPath.VOUCHER_GET_BY_ID_V2,
  }),
  /**
   * Info: (20241007 - Murky)
   * Below is v2 API
   */
  [APIName.REPORT_GET_V2]: createConfig({
    name: APIName.REPORT_GET_V2,
    method: HttpMethod.GET,
    path: APIPath.REPORT_GET_V2,
  }),
  [APIName.ASSET_GET_BY_ID_V2]: createConfig({
    name: APIName.ASSET_GET_BY_ID_V2,
    method: HttpMethod.GET,
    path: APIPath.ASSET_GET_BY_ID_V2,
  }),
  [APIName.VOUCHER_LIST_V2]: createConfig({
    name: APIName.VOUCHER_LIST_V2,
    method: HttpMethod.GET,
    path: APIPath.VOUCHER_LIST_V2,
  }),
  [APIName.REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2]: createConfig({
    // Info: (20241106 - Murky) @Julian 這個是Reverse Voucher的時後可以get出account list的api
    name: APIName.REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2,
    method: HttpMethod.GET,
    path: APIPath.REVERSE_LINE_ITEM_GET_BY_ACCOUNT_V2,
  }),
  [APIName.VOUCHER_LIST_GET_BY_ACCOUNT_V2]: createConfig({
    name: APIName.VOUCHER_LIST_GET_BY_ACCOUNT_V2,
    method: HttpMethod.GET,
    path: APIPath.VOUCHER_LIST_GET_BY_ACCOUNT_V2,
  }),
  [APIName.ASK_AI_V2]: createConfig({
    name: APIName.ASK_AI_V2,
    method: HttpMethod.POST,
    path: APIPath.ASK_AI_V2,
  }),
  [APIName.ASK_AI_RESULT_V2]: createConfig({
    name: APIName.ASK_AI_RESULT_V2,
    method: HttpMethod.GET,
    path: APIPath.ASK_AI_RESULT_V2,
  }),
  [APIName.ACCOUNTING_SETTING_GET]: createConfig({
    name: APIName.ACCOUNTING_SETTING_GET,
    method: HttpMethod.GET,
    path: APIPath.ACCOUNTING_SETTING_GET,
  }),
  [APIName.ACCOUNTING_SETTING_UPDATE]: createConfig({
    name: APIName.ACCOUNTING_SETTING_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.ACCOUNTING_SETTING_UPDATE,
  }),
  [APIName.CERTIFICATE_LIST_V2]: createConfig({
    name: APIName.CERTIFICATE_LIST_V2,
    method: HttpMethod.GET,
    path: APIPath.CERTIFICATE_LIST_V2,
  }),
  [APIName.INPUT_CERTIFICATE_LIST]: createConfig({
    name: APIName.INPUT_CERTIFICATE_LIST,
    method: HttpMethod.GET,
    path: APIPath.INPUT_CERTIFICATE_LIST,
  }),
  [APIName.OUTPUT_CERTIFICATE_LIST]: createConfig({
    name: APIName.OUTPUT_CERTIFICATE_LIST,
    method: HttpMethod.GET,
    path: APIPath.OUTPUT_CERTIFICATE_LIST,
  }),
  [APIName.CERTIFICATE_GET_V2]: createConfig({
    name: APIName.CERTIFICATE_GET_V2,
    method: HttpMethod.GET,
    path: APIPath.CERTIFICATE_GET_V2,
  }),
  [APIName.CERTIFICATE_POST_V2]: createConfig({
    name: APIName.CERTIFICATE_POST_V2,
    method: HttpMethod.POST,
    path: APIPath.CERTIFICATE_POST_V2,
  }),
  [APIName.CERTIFICATE_PUT_V2]: createConfig({
    name: APIName.CERTIFICATE_PUT_V2,
    method: HttpMethod.PUT,
    path: APIPath.CERTIFICATE_PUT_V2,
  }),
  [APIName.CERTIFICATE_DELETE_V2]: createConfig({
    name: APIName.CERTIFICATE_DELETE_V2,
    method: HttpMethod.DELETE,
    path: APIPath.CERTIFICATE_PUT_V2,
  }),
  [APIName.INVOICE_POST_V2]: createConfig({
    name: APIName.INVOICE_POST_V2,
    method: HttpMethod.POST,
    path: APIPath.INVOICE_POST_V2,
  }),
  [APIName.INVOICE_PUT_V2]: createConfig({
    name: APIName.INVOICE_PUT_V2,
    method: HttpMethod.PUT,
    path: APIPath.INVOICE_PUT_V2,
  }),
  // Info: (20241028 - Tzuhan) @Murky, 需要新增這個 API 用來在 certificate list 一次性刪除多張certificate
  [APIName.CERTIFICATE_DELETE_MULTIPLE_V2]: createConfig({
    name: APIName.CERTIFICATE_DELETE_MULTIPLE_V2,
    method: HttpMethod.DELETE,
    path: APIPath.CERTIFICATE_DELETE_MULTIPLE_V2,
  }),
  [APIName.COUNTERPARTY_LIST]: createConfig({
    name: APIName.COUNTERPARTY_LIST,
    method: HttpMethod.GET,
    path: APIPath.COUNTERPARTY_LIST,
  }),
  [APIName.COUNTERPARTY_ADD]: createConfig({
    name: APIName.COUNTERPARTY_ADD,
    method: HttpMethod.POST,
    path: APIPath.COUNTERPARTY_ADD,
  }),
  [APIName.COUNTERPARTY_GET_BY_ID]: createConfig({
    name: APIName.COUNTERPARTY_GET_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.COUNTERPARTY_GET_BY_ID,
  }),
  [APIName.COUNTERPARTY_UPDATE]: createConfig({
    name: APIName.COUNTERPARTY_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.COUNTERPARTY_UPDATE,
  }),
  [APIName.COUNTERPARTY_DELETE]: createConfig({
    name: APIName.COUNTERPARTY_DELETE,
    method: HttpMethod.DELETE,
    path: APIPath.COUNTERPARTY_DELETE,
  }),
  [APIName.ASSET_LIST_V2]: createConfig({
    name: APIName.ASSET_LIST_V2,
    method: HttpMethod.GET,
    path: APIPath.ASSET_LIST_V2,
  }),
  [APIName.USER_SETTING_GET]: createConfig({
    name: APIName.USER_SETTING_GET,
    method: HttpMethod.GET,
    path: APIPath.USER_SETTING_GET,
  }),
  [APIName.USER_SETTING_UPDATE]: createConfig({
    name: APIName.USER_SETTING_UPDATE,
    method: HttpMethod.PUT,
    path: APIPath.USER_SETTING_UPDATE,
  }),
  [APIName.USER_ACTION_LOG_LIST]: createConfig({
    name: APIName.USER_ACTION_LOG_LIST,
    method: HttpMethod.GET,
    path: APIPath.USER_ACTION_LOG_LIST,
  }),
  [APIName.CREATE_ASSET_V2]: createConfig({
    name: APIName.CREATE_ASSET_V2,
    method: HttpMethod.POST,
    path: APIPath.CREATE_ASSET_V2,
  }),
  [APIName.DELETE_ASSET_V2]: createConfig({
    name: APIName.DELETE_ASSET_V2,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_ASSET_V2,
  }),
  [APIName.UPDATE_ASSET_V2]: createConfig({
    name: APIName.UPDATE_ASSET_V2,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_ASSET_V2,
  }),
  [APIName.VOUCHER_DELETE_V2]: createConfig({
    name: APIName.VOUCHER_DELETE_V2,
    method: HttpMethod.DELETE,
    path: APIPath.VOUCHER_DELETE_V2,
  }),
  [APIName.TRIAL_BALANCE_LIST]: createConfig({
    name: APIName.TRIAL_BALANCE_LIST,
    method: HttpMethod.GET,
    path: APIPath.TRIAL_BALANCE_LIST,
  }),
  [APIName.ASSET_LIST_EXPORT]: createConfig({
    name: APIName.ASSET_LIST_EXPORT,
    method: HttpMethod.POST,
    path: APIPath.ASSET_LIST_EXPORT,
  }),
  [APIName.FILE_EXPORT]: createConfig({
    name: APIName.FILE_EXPORT,
    method: HttpMethod.POST,
    path: APIPath.FILE_EXPORT,
  }),
  [APIName.LEDGER_LIST]: createConfig({
    name: APIName.LEDGER_LIST,
    method: HttpMethod.GET,
    path: APIPath.LEDGER_LIST,
  }),
  [APIName.VOUCHER_POST_V2]: createConfig({
    name: APIName.VOUCHER_POST_V2,
    method: HttpMethod.POST,
    path: APIPath.VOUCHER_POST_V2,
  }),
  [APIName.PUSHER_AUTH]: createConfig({
    name: APIName.PUSHER_AUTH,
    method: HttpMethod.POST,
    path: APIPath.PUSHER_AUTH,
  }),
  [APIName.TRIAL_BALANCE_EXPORT]: createConfig({
    name: APIName.TRIAL_BALANCE_EXPORT,
    method: HttpMethod.POST,
    path: APIPath.TRIAL_BALANCE_EXPORT,
  }),
  [APIName.CREATE_ASSET_BULK]: createConfig({
    name: APIName.CREATE_ASSET_BULK,
    method: HttpMethod.POST,
    path: APIPath.CREATE_ASSET_BULK,
  }),
  [APIName.LEDGER_EXPORT]: createConfig({
    name: APIName.LEDGER_EXPORT,
    method: HttpMethod.POST,
    path: APIPath.LEDGER_EXPORT,
  }),
  [APIName.LIST_LOGIN_DEVICE]: createConfig({
    name: APIName.LIST_LOGIN_DEVICE,
    method: HttpMethod.GET,
    path: APIPath.LIST_LOGIN_DEVICE,
  }),
  [APIName.REMOVE_LOGIN_DEVICE]: createConfig({
    name: APIName.REMOVE_LOGIN_DEVICE,
    method: HttpMethod.DELETE,
    path: APIPath.REMOVE_LOGIN_DEVICE,
  }),
  [APIName.CREATE_TEAM]: createConfig({
    name: APIName.CREATE_TEAM,
    method: HttpMethod.POST,
    path: APIPath.CREATE_TEAM,
  }),
  [APIName.LIST_TEAM]: createConfig({
    name: APIName.LIST_TEAM,
    method: HttpMethod.GET,
    path: APIPath.LIST_TEAM,
  }),
  [APIName.GET_TEAM_BY_ID]: createConfig({
    name: APIName.GET_TEAM_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.GET_TEAM_BY_ID,
  }),
  [APIName.LIST_ACCOUNT_BOOK_BY_TEAM_ID]: createConfig({
    name: APIName.LIST_ACCOUNT_BOOK_BY_TEAM_ID,
    method: HttpMethod.GET,
    path: APIPath.LIST_ACCOUNT_BOOK_BY_TEAM_ID,
  }),
  [APIName.LIST_MEMBER_BY_TEAM_ID]: createConfig({
    name: APIName.LIST_MEMBER_BY_TEAM_ID,
    method: HttpMethod.GET,
    path: APIPath.LIST_MEMBER_BY_TEAM_ID,
  }),
  [APIName.ADD_MEMBER_TO_TEAM]: createConfig({
    name: APIName.ADD_MEMBER_TO_TEAM,
    method: HttpMethod.PUT,
    path: APIPath.ADD_MEMBER_TO_TEAM,
  }),
  [APIName.LIST_TEAM_SUBSCRIPTION]: createConfig({
    name: APIName.LIST_TEAM_SUBSCRIPTION,
    method: HttpMethod.GET,
    path: APIPath.LIST_TEAM_SUBSCRIPTION,
  }),
  [APIName.GET_SUBSCRIPTION_BY_TEAM_ID]: createConfig({
    name: APIName.GET_SUBSCRIPTION_BY_TEAM_ID,
    method: HttpMethod.GET,
    path: APIPath.GET_SUBSCRIPTION_BY_TEAM_ID,
  }),
  [APIName.UPDATE_SUBSCRIPTION]: createConfig({
    name: APIName.UPDATE_SUBSCRIPTION,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_SUBSCRIPTION,
  }),
  [APIName.LIST_TEAM_INVOICE]: createConfig({
    name: APIName.LIST_TEAM_INVOICE,
    method: HttpMethod.GET,
    path: APIPath.LIST_TEAM_INVOICE,
  }),
  [APIName.GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID]: createConfig({
    name: APIName.GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID,
    method: HttpMethod.GET,
    path: APIPath.GET_SUBSCRIPTION_INVOICE_BY_TEAM_ID,
  }),
  [APIName.GET_CREDIT_CARD_INFO]: createConfig({
    name: APIName.GET_CREDIT_CARD_INFO,
    method: HttpMethod.GET,
    path: APIPath.GET_CREDIT_CARD_INFO,
  }),
  [APIName.VOUCHER_RESTORE_V2]: createConfig({
    name: APIName.VOUCHER_RESTORE_V2,
    method: HttpMethod.POST,
    path: APIPath.VOUCHER_RESTORE_V2,
  }),
  [APIName.LEAVE_TEAM]: createConfig({
    name: APIName.LEAVE_TEAM,
    method: HttpMethod.GET,
    path: APIPath.LEAVE_TEAM,
  }),
  [APIName.REQUEST_TRANSFER_ACCOUNT_BOOK]: createConfig({
    name: APIName.REQUEST_TRANSFER_ACCOUNT_BOOK,
    method: HttpMethod.POST,
    path: APIPath.REQUEST_TRANSFER_ACCOUNT_BOOK,
  }),
  [APIName.CANCEL_TRANSFER_ACCOUNT_BOOK]: createConfig({
    name: APIName.CANCEL_TRANSFER_ACCOUNT_BOOK,
    method: HttpMethod.GET,
    path: APIPath.CANCEL_TRANSFER_ACCOUNT_BOOK,
  }),
  [APIName.ACCEPT_TRANSFER_ACCOUNT_BOOK]: createConfig({
    name: APIName.ACCEPT_TRANSFER_ACCOUNT_BOOK,
    method: HttpMethod.GET,
    path: APIPath.ACCEPT_TRANSFER_ACCOUNT_BOOK,
  }),
  [APIName.DECLINE_TRANSFER_ACCOUNT_BOOK]: createConfig({
    name: APIName.DECLINE_TRANSFER_ACCOUNT_BOOK,
    method: HttpMethod.GET,
    path: APIPath.DECLINE_TRANSFER_ACCOUNT_BOOK,
  }),
  [APIName.LIST_PAYMENT_PLAN]: createConfig({
    name: APIName.LIST_PAYMENT_PLAN,
    method: HttpMethod.GET,
    path: APIPath.LIST_PAYMENT_PLAN,
  }),
  [APIName.LIST_ACCOUNT_BOOK_BY_USER_ID]: createConfig({
    name: APIName.LIST_ACCOUNT_BOOK_BY_USER_ID,
    method: HttpMethod.GET,
    path: APIPath.LIST_ACCOUNT_BOOK_BY_USER_ID,
  }),
  [APIName.CONNECT_ACCOUNT_BOOK_BY_ID]: createConfig({
    name: APIName.CONNECT_ACCOUNT_BOOK_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.CONNECT_ACCOUNT_BOOK_BY_ID,
  }),

  [APIName.UPDATE_TEAM_BY_ID]: createConfig({
    name: APIName.UPDATE_TEAM_BY_ID,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_TEAM_BY_ID,
  }),
  [APIName.UPDATE_MEMBER]: createConfig({
    name: APIName.UPDATE_MEMBER,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_MEMBER,
  }),
  [APIName.DELETE_MEMBER]: createConfig({
    name: APIName.DELETE_MEMBER,
    method: HttpMethod.DELETE,
    path: APIPath.DELETE_MEMBER,
  }),
  [APIName.GET_ACCOUNT_BOOK_INFO_BY_ID]: createConfig({
    name: APIName.GET_ACCOUNT_BOOK_INFO_BY_ID,
    method: HttpMethod.GET,
    path: APIPath.GET_ACCOUNT_BOOK_INFO_BY_ID,
  }),
  [APIName.PUT_TEAM_ICON]: createConfig({
    name: APIName.PUT_TEAM_ICON,
    method: HttpMethod.PUT,
    path: APIPath.PUT_TEAM_ICON,
  }),
  [APIName.UPDATE_ACCOUNT_BOOK]: createConfig({
    name: APIName.UPDATE_ACCOUNT_BOOK,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_ACCOUNT_BOOK,
  }),
  [APIName.USER_PAYMENT_METHOD_LIST]: createConfig({
    name: APIName.USER_PAYMENT_METHOD_LIST,
    method: HttpMethod.GET,
    path: APIPath.USER_PAYMENT_METHOD_LIST,
  }),
  [APIName.USER_PAYMENT_METHOD_CHARGE]: createConfig({
    name: APIName.USER_PAYMENT_METHOD_CHARGE,
    method: HttpMethod.POST,
    path: APIPath.USER_PAYMENT_METHOD_CHARGE,
  }),
  [APIName.UPDATE_ACCOUNT_BOOK_INFO]: createConfig({
    name: APIName.UPDATE_ACCOUNT_BOOK_INFO,
    method: HttpMethod.PUT,
    path: APIPath.UPDATE_ACCOUNT_BOOK_INFO,
  }),
  [APIName.DISCONNECT_ACCOUNT_BOOK]: createConfig({
    name: APIName.DISCONNECT_ACCOUNT_BOOK,
    method: HttpMethod.GET,
    path: APIPath.DISCONNECT_ACCOUNT_BOOK,
  }),
  [APIName.LIST_ACCOUNT_BOOK_INFO_BY_USER_ID]: createConfig({
    name: APIName.LIST_ACCOUNT_BOOK_INFO_BY_USER_ID,
    method: HttpMethod.GET,
    path: APIPath.LIST_ACCOUNT_BOOK_INFO_BY_USER_ID,
  }),
  [APIName.ACCOUNT_BOOK_PUT_ICON]: createConfig({
    name: APIName.ACCOUNT_BOOK_PUT_ICON,
    method: HttpMethod.PUT,
    path: APIPath.ACCOUNT_BOOK_PUT_ICON,
  }),
};
