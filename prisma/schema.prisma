// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url = env("DATABASE_URL")
}

model account {
    id          Int   @id @default(autoincrement())
    type        String
    liquidity   String
    account     String
    code        String
    name        String
}

model asset {
    id                Int      @id @default(autoincrement())
    name              String
    projectId         Int
    type              String
    description       String
    startedDate       String
    endDate           String
    purchasePrice     String
    purchaseAmount    String
    totalPrice        String
    residualValue     String
    estimateUsefulLife String
    depreciationMethod String

    project           project @relation(fields: [projectId], references: [id])
}

model auditReport {
    id                Int      @id @default(autoincrement())
    companyId         Int      @map("company_id")
    informationYear   String
    detailedInformation String
    creditRating      String
    dateOfUpload      Int
    link              String

    company           company  @relation(fields: [companyId], references: [id])
}

model card {
    id          Int   @id @default(autoincrement())
    type        String
    no          String
    expireYear  String
    expireMonth String
    cvc         String
    name        String

    subscriptions subscription[]
}

model cashflow {
    id          Int   @id @default(autoincrement())
    period      String
    income      Int
    expenses    Int
}

model client {
    id                Int      @id @default(autoincrement())
    companyId         Int      @map("company_id")
    favorite          Boolean

    company           company  @relation(fields: [companyId], references: [id])
}

model company {
    id                Int      @id @default(autoincrement())
    name              String
    code              String
    regional          String

    roles            role[]
    auditReports      auditReport[]
    clients           client[]
    employees         employee[]
    imvoices          invoice[]
    companyKYCs       companyKYC[]
    subscriptions     subscription[]
    usersCompanysRoles    userCompanyRole[]
    companysToDepartments companyDepartment[]
}

model companyKYC {
    id                      Int   @id @default(autoincrement())
    companyId               Int
    address                 String
    representativeName      String
    country                 String
    legalForm               String
    registrationNumber      String
    registrationDate        String
    registrationIndustry    String
    contactPerson           String
    contactPhone            String
    contactEmail            String
    website                 String
    registrationCertificateId String
    registrationCertificate String
    taxCertificateId        String
    taxCertificate          String
    representativeIdType    String
    representativeIdCardId  String
    representativeIdcard    String

    company                 company  @relation(fields: [companyId], references: [id])
}

model companyDepartment {
    id           Int      @id @default(autoincrement())
    companyId    Int
    departmentId Int

    company      company    @relation(fields: [companyId], references: [id])
    department   department @relation(fields: [departmentId], references: [id])

    @@map("company_department")
}

model contract {
    id          Int      @id @default(autoincrement())
    contractName String
    projectId    Int      @map("project_id")
    signatory    String
    status       String
    payment      String
    startDate    Int
    endDate      Int
    progress     String

    project      project  @relation(fields: [projectId], references: [id])
}

model department {
    id         Int      @id @default(autoincrement())
    name       String

    employees  employee[]
    companyToDepartment companyDepartment[]
}

model employee {
    id                Int      @id @default(autoincrement())
    name              String
    departmentId      Int      @map("department_id")
    companyId         Int      @map("company_id")
    salary            Int
    insurancePayment  String
    bonus             String
    salaryPayMode     String
    payFrequency      String
    startDate         Int
    endDate           Int

    employeeToProjects employeeProject[]

    department        department @relation(fields: [departmentId], references: [id])
    company           company    @relation(fields: [companyId], references: [id])
}

model employeeProject {
    id          Int      @id @default(autoincrement())
    employeeId  Int
    projectId   Int

    employee    employee @relation(fields: [employeeId], references: [id])
    project     project  @relation(fields: [projectId], references: [id])

    @@map("employee_project")
}

model invoice {
    id          Int      @id @default(autoincrement())
    companyId   Int      @map("company_id")
    invoiceNo   String
    invoiceDate Int
    dueDate     Int
    status      String
    totalAmount String

    company     company  @relation(fields: [companyId], references: [id])
}

model lineItem {
    id          Int   @id @default(autoincrement())
    account     String
    description String
    debit       Boolean
    amount      Int

    @@map("line_item")
}

model project {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    startDate   Int
    endDate     Int
    status      String

    assets            asset[]
    contracts   contract[]
    employeesToProjects employeeProject[]
}

model role {
    id               Int      @id @default(autoincrement())
    companyId        Int      @map("company_id")
    name             String   
    permissions       String[]

    usersCompanysRoles    userCompanyRole[]

    company          company  @relation(fields: [companyId], references: [id])
}

model subscription {
    id          Int   @id @default(autoincrement())
    companyId   Int      @map("company_id")
    plan        String
    cardId      Int      @map("card_id")
    price       String
    autoRenew   Boolean
    startDate   Int 
    expireDate  Int 
    status      String

    company     company  @relation(fields: [companyId], references: [id])
    card        card     @relation(fields: [cardId], references: [id])
}

model user {
    id              Int      @id @default(autoincrement())
    name            String
    fullName        String?
    email           String?
    phone           String?
    kycStatus       Boolean   @default(false)
    credentialId    String
    publicKey       String
    algorithm       String
    imageId         String?

    userKYCs        userKYC[]
    usersCompanysRoles    userCompanyRole[]
}

model userKYC {
    id                      Int   @id @default(autoincrement())
    userId                  Int
    country                 String
    idType                  String
    idNumber                String
    idImageId               String
    idImage                 String
    occupation              String
    certificateFrontImageId String
    certificateFrontImage   String
    certificateBackImageId  String
    certificateBackImage    String
    selfieImageId           String
    selfieImage             String
    facialIdentifyFileId    String
    facialIdentifyFile      String
    status                  String

    user                    user  @relation(fields: [userId], references: [id])

    @@map("user_kyc")
}

model userCompanyRole {
    id         Int      @id @default(autoincrement())
    userId     Int
    companyId  Int
    roleId    Int
    startDate Int

    user       user    @relation(fields: [userId], references: [id])
    company    company @relation(fields: [companyId], references: [id])
    role      role @relation(fields: [roleId], references: [id])

    @@map("user_company_role")
}
