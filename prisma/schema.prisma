generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model account {
  id        Int        @id @default(autoincrement())
  type      String
  liquidity String
  account   String
  code      String
  name      String
  lineItem  lineItem[]
}

model asset {
  id                 Int     @id @default(autoincrement())
  name               String
  projectId          Int     @map("project_id")
  type               String
  description        String
  startedDate        String  @map("started_date")
  endDate            String  @map("end_date")
  purchasePrice      String  @map("purchase_price")
  purchaseAmount     String  @map("purchase_amount")
  totalPrice         String  @map("total_price")
  residualValue      String  @map("residual_value")
  estimateUsefulLife String  @map("estimate_useful_life")
  depreciationMethod String  @map("depreciation_method")
  project            project @relation(fields: [projectId], references: [id])
}

model auditReport {
  id                  Int     @id @default(autoincrement())
  companyId           Int     @map("company_id")
  informationYear     String  @map("information_year")
  detailedInformation String  @map("detailed_information")
  creditRating        String  @map("credit_rating")
  link                String
  dateOfUpload        Int     @map("date_of_upload")
  company             company @relation(fields: [companyId], references: [id])

  @@map("audit_report")
}

model cashflow {
  id        Int     @id @default(autoincrement())
  createdAt Int     @map("created_at")
  income    Int
  expense   Int
  projectId Int     @map("project_id")
  project   project @relation(fields: [projectId], references: [id])
}

model client {
  id        Int     @id @default(autoincrement())
  companyId Int     @map("company_id")
  favorite  Boolean
  company   company @relation(fields: [companyId], references: [id])
}

model company {
  id                 Int               @id @default(autoincrement())
  name               String
  code               String            @unique
  regional           String
  startDate          Int               @map("start_date")
  createdAt          Int               @map("created_at")
  updatedAt          Int               @map("updated_at")
  auditReports       auditReport[]
  clients            client[]
  companyKYCs        companyKYC[]
  contracts          contract[]
  departments        department[]
  employees          employee[]
  invitations        invitation[]
  journals           journal[]
  projects           project[]
  subscriptions      subscription[]
  paymentRecords     paymentRecord[]
  usersCompanysRoles userCompanyRole[]
}

model companyKYC {
  id                        Int     @id @default(autoincrement())
  companyId                 Int     @map("company_id")
  address                   String
  representativeName        String  @map("representative_name")
  country                   String
  registrationNumber        String  @map("registration_number")
  registrationDate          String  @map("registration_date")
  contactPerson             String  @map("contact_person")
  contactPhone              String  @map("contact_phone")
  contactEmail              String  @map("contact_email")
  website                   String
  registrationCertificateId String  @map("registration_certificate_id")
  taxCertificateId          String  @map("tax_certificate_id")
  representativeIdType      String  @map("representative_id_type")
  representativeIdCardId    String  @map("representative_id_card_id")
  city                      String
  industry                  String
  legalName                 String  @map("legal_name")
  structure                 String
  zipCode                   String  @map("zip_code")
  createdAt                 Int     @map("created_at")
  company                   company @relation(fields: [companyId], references: [id])

  @@map("company_kyc")
}

model contract {
  id                Int              @id @default(autoincrement())
  aichResultId      String           @unique @map("aich_result_id")
  ocrId             Int              @unique @map("ocr_id")
  contractContentId Int?             @unique @map("contract_content_id")
  projectId         Int?             @map("project_id")
  companyId         Int              @map("company_id")
  company           company          @relation(fields: [companyId], references: [id])
  contractContent   contractContent? @relation(fields: [contractContentId], references: [id])
  ocr               ocr              @relation(fields: [ocrId], references: [id])
  project           project?         @relation(fields: [projectId], references: [id])
  journal           journal?
}

model contractContent {
  id                Int       @id @default(autoincrement())
  name              String
  signatory         String
  signatoryDate     Int       @map("signatory_date")
  status            String
  paymentId         Int       @unique @map("payment_id")
  hasContractDate   Boolean   @map("has_contract_date")
  contractStartDate Int?      @map("contract_start_date")
  contractEndDate   Int?      @map("contract_end_date")
  hasDeadlineDate   Boolean   @map("has_deadline_date")
  deadlineDate      Int?      @map("deadline_date")
  hasWarrantyDate   Boolean   @map("has_warranty_date")
  warrantyStartDate Int?      @map("warranty_start_date")
  warrantyEndDate   Int?      @map("warranty_end_date")
  serviceType       String    @map("service_type")
  estimatedCost     Int?      @map("estimated_cost")
  contract          contract?
  payment           payment   @relation(fields: [paymentId], references: [id])
}

model department {
  id        Int        @id @default(autoincrement())
  companyId Int        @map("company_id")
  name      String
  company   company    @relation(fields: [companyId], references: [id])
  employees employee[]
}

model employee {
  id               Int        @id @default(autoincrement())
  name             String
  imageId          String?
  departmentId     Int        @map("department_id")
  companyId        Int        @map("company_id")
  salary           Int
  insurancePayment Int
  bonus            Int
  salaryPayMode    String     @map("salary_pay_mode")
  payFrequency     String     @map("pay_frequency")
  startDate        Int
  endDate          Int?
  company          company    @relation(fields: [companyId], references: [id])
  department       department @relation(fields: [departmentId], references: [id])
  salaries         salary[]
  workRates        workRate[]
}

model invoice {
  id               Int      @id @default(autoincrement())
  date             Int
  eventType        String   @map("event_type")
  paymentReason    String   @map("payment_reason")
  description      String
  vendorOrSupplier String   @map("vendor_or_supplier")
  paymentId        Int      @unique @map("payment_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  projectId        Int?     @map("project_id")
  payment          payment  @relation(fields: [paymentId], references: [id])
  project          project? @relation(fields: [projectId], references: [id])
  journal          journal?
}

model invitation {
  id            Int     @id @default(autoincrement())
  code          String  @unique
  companyId     Int     @map("company_id")
  roleId        Int     @map("role_id")
  createdUserId Int     @map("created_user_id")
  hasUsed       Boolean
  expiredAt     Int
  company       company @relation(fields: [companyId], references: [id])
  createdUser   user    @relation(fields: [createdUserId], references: [id])
  role          role    @relation(fields: [roleId], references: [id])
}

model journal {
  id            Int       @id @default(autoincrement())
  tokenContract String?   @map("token_contract")
  tokenId       String?   @map("token_id")
  ocrId         Int?      @unique @map("ocr_id")
  aichResultId  String?   @unique @map("aich_result_id")
  invoiceId     Int?      @unique @map("invoice_id")
  voucherId     Int?      @unique @map("voucher_id")
  projectId     Int?      @unique @map("project_id")
  contractId    Int?      @unique @map("contract_id")
  companyId     Int?      @map("company_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  company       company?  @relation(fields: [companyId], references: [id])
  contract      contract? @relation(fields: [contractId], references: [id])
  invoice       invoice?  @relation(fields: [invoiceId], references: [id])
  ocr           ocr?      @relation(fields: [ocrId], references: [id])
  project       project?  @relation(fields: [projectId], references: [id])
  voucher       voucher?  @relation(fields: [voucherId], references: [id])
}

model lineItem {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String
  debit       Boolean
  accountId   Int      @map("account_id")
  voucherId   Int?     @map("voucher_id")
  account     account  @relation(fields: [accountId], references: [id])
  voucher     voucher? @relation(fields: [voucherId], references: [id])

  @@map("line_item")
}

model milestone {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  startDate Int     @map("start_date")
  endDate   Int     @map("end_date")
  status    String
  project   project @relation(fields: [projectId], references: [id])
}

model ocr {
  id        Int       @id @default(autoincrement())
  imageName String    @map("image_name")
  imageUrl  String    @map("image_url")
  imageSize Float     @map("image_size")
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  contract  contract?
  journal   journal?
}

model project {
  id               Int         @id @default(autoincrement())
  companyId        Int         @map("company_id")
  name             String
  completedPercent Int         @map("completed_percent")
  stage            String
  totalExpense     Int?        @map("total_expense")
  totalIncome      Int?        @map("total_income")
  imageId          String?     @map("image_id")
  assets           asset[]
  cashflow         cashflow[]
  contracts        contract[]
  invoices         invoice[]
  journals         journal?
  milestones       milestone[]
  company          company     @relation(fields: [companyId], references: [id])
  sales            sale[]
  values           value[]
  workRates        workRate[]
  report           report[]
}

// Todo: (20240530 - Jacky) Should change the name of the variable starts with payment
model payment {
  id                 Int              @id @default(autoincrement())
  isRevenue          Boolean          @map("is_revenue")
  price              Int
  hasTax             Boolean          @map("has_tax")
  taxPercentage      Int              @map("tax_percentage")
  hasFee             Boolean          @map("has_fee")
  fee                Int
  paymentMethod      String           @map("payment_method")
  paymentPeriod      String           @map("payment_period")
  installmentPeriod  Int              @map("installment_period")
  paymentAlreadyDone Int              @map("payment_already_done")
  paymentStatus      String           @map("payment_status")
  progress           Int
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  contractContent    contractContent?
  invoice            invoice?
}

model paymentRecord {
  id              Int           @id @default(autoincrement())
  companyId       Int           @map("company_id")
  subscriptionId  Int
  date            Int
  description     String
  amount          Int
  method          String        

  subscription    subscription  @relation(fields: [subscriptionId], references: [id])
  company         company       @relation(fields: [companyId], references: [id])
}

model role {
  id                 Int               @id @default(autoincrement())
  name               String            @unique
  permissions        String[]
  invitations        invitation[]
  usersCompanysRoles userCompanyRole[]
}

model report {
  id                     Int      @id @default(autoincrement())
  createdAt              Int      @map("created_at")
  name                   String
  from                   Int
  to                     Int
  type                   String
  reportType             String   @map("report_type")
  status                 String
  remainingSeconds       Int?     @map("remaining_seconds")
  paused                 Boolean?
  projectId              Int?     @map("project_id")
  reportLink             String?  @map("report_link")
  downloadLink           String?  @map("download_link")
  blockChainExplorerLink String?  @map("block_chain_explorer_link")
  evidenceId             String?  @map("evidence_id")
  project                project? @relation(fields: [projectId], references: [id])
}

model subscription {
  id         Int     @id @default(autoincrement())
  plan       String
  price      String
  autoRenew  Boolean @map("auto_renew")
  status     String
  cardId     Int     @map("card_id")
  startDate  Int     @map("start_date")
  expireDate Int     @map("expire_date")
  companyId  Int     @map("company_id")
  company    company @relation(fields: [companyId], references: [id])
  paymentRecords   paymentRecord[]
}

model sale {
  id         Int     @id @default(autoincrement())
  projectId  Int     @map("project_id")
  date       String
  totalSales Int     @map("total_sales")
  comparison Int
  project    project @relation(fields: [projectId], references: [id])
}

model salary {
  id               Int      @id @default(autoincrement())
  employeeId       Int      @map("employee_id")
  salary           Int
  insurancePayment Int      @map("insurance_payment")
  bonus            Int
  description      String
  date             Int
  employee         employee @relation(fields: [employeeId], references: [id])
}

model user {
  id                 Int               @id @default(autoincrement())
  name               String
  fullName           String?           @map("full_name")
  email              String?
  phone              String?
  credentialId       String            @unique @map("credential_id")
  publicKey          String            @map("public_key")
  algorithm          String
  imageId            String?           @map("image_id")
  invitations        invitation[]
  usersCompanysRoles userCompanyRole[]
}

model userCompanyRole {
  userId    Int     @map("user_id")
  companyId Int     @map("company_id")
  roleId    Int     @map("role_id")
  startDate Int     @map("start_date")
  company   company @relation(fields: [companyId], references: [id])
  role      role    @relation(fields: [roleId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@id([userId, companyId, roleId])
  @@map("user_company_role")
}

model voucher {
  id        Int        @id @default(autoincrement())
  no        String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  journal   journal?
  lineItems lineItem[]
}

model value {
  id                      Int     @id @default(autoincrement())
  projectId               Int     @map("project_id")
  totalRevenue            Int     @map("total_revenue")
  totalRevenueGrowthIn30d Int     @map("total_revenue_growth_in_30d")
  totalExpense            Int     @map("total_expense")
  netProfit               Int     @map("net_profit")
  netProfitGrowthIn30d    Int     @map("net_profit_growth_in_30d")
  netProfitGrowthInYear   Int     @map("net_profit_growth_in_year")
  project                 project @relation(fields: [projectId], references: [id])
}

model workRate {
  projectId       Int      @map("project_id")
  employeeId      Int      @map("employee_id")
  involvementRate Int?     @map("involvement_rate")
  hours           Int
  date            Int
  project         project  @relation(fields: [projectId], references: [id])
  employee        employee @relation(fields: [employeeId], references: [id])

  @@id([projectId, employeeId])
  @@map("work_rate")
}
