generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model account {
  id        Int    @id @default(autoincrement())
  type      String
  liquidity String
  account   String
  code      String
  name      String
}

model asset {
  id                 Int     @id @default(autoincrement())
  name               String
  projectId          Int
  type               String
  description        String
  startedDate        String
  endDate            String
  purchasePrice      String
  purchaseAmount     String
  totalPrice         String
  residualValue      String
  estimateUsefulLife String
  depreciationMethod String
  project            project @relation(fields: [projectId], references: [id])
}

model auditReport {
  id                  Int     @id @default(autoincrement())
  companyId           Int     @map("company_id")
  informationYear     String
  detailedInformation String
  creditRating        String
  link                String
  dateOfUpload        Int
  company             company @relation(fields: [companyId], references: [id])
}

model card {
  id            Int            @id @default(autoincrement())
  type          String
  no            String
  expireYear    String
  expireMonth   String
  cvc           String
  name          String
  subscriptions subscription[]
}

model cashflow {
  id       Int    @id @default(autoincrement())
  period   String
  income   Int
  expenses Int
}

model client {
  id        Int     @id @default(autoincrement())
  companyId Int     @map("company_id")
  favorite  Boolean
  company   company @relation(fields: [companyId], references: [id])
}

model company {
  id                 Int               @id @default(autoincrement())
  name               String
  code               String
  regional           String
  auditReports       auditReport[]
  clients            client[]
  companyKYCs        companyKYC[]
  department         department[]
  employees          employee[]
  invitations        invitation[]
  invoice            invoice[]
  journal            journal[]
  project            project[]
  roles              role[]
  subscriptions      subscription[]
  usersCompanysRoles userCompanyRole[]
}

model companyKYC {
  id                        Int     @id @default(autoincrement())
  companyId                 Int
  address                   String
  representativeName        String
  country                   String
  registrationNumber        String
  registrationDate          String
  contactPerson             String
  contactPhone              String
  contactEmail              String
  website                   String
  registrationCertificateId String
  taxCertificateId          String
  representativeIdType      String
  representativeIdCardId    String
  city                      String
  industry                  String
  legalName                 String
  structure                 String
  zipCode                   String
  createdAt                 Int     @map("created_at")
  company                   company @relation(fields: [companyId], references: [id])
}

model contract {
  id           Int      @id @default(autoincrement())
  contractName String
  projectId    Int      @map("project_id")
  signatory    String
  status       String
  payment      String
  progress     String
  startDate    Int
  endDate      Int
  project      project  @relation(fields: [projectId], references: [id])
  journal      journal?
}

model department {
  id         Int        @id @default(autoincrement())
  company_id Int
  name       String
  company    company    @relation(fields: [company_id], references: [id])
  employees  employee[]
}

model employee {
  id                 Int               @id @default(autoincrement())
  name               String
  imageId            String?
  departmentId       Int               @map("department_id")
  companyId          Int               @map("company_id")
  salary             Int
  insurancePayment   String
  bonus              String
  salaryPayMode      String
  payFrequency       String
  startDate          Int
  endDate            Int
  company            company           @relation(fields: [companyId], references: [id])
  department         department        @relation(fields: [departmentId], references: [id])
  employeeToProjects employeeProject[]
}

model employeeProject {
  id         Int      @id @default(autoincrement())
  employeeId Int
  projectId  Int
  employee   employee @relation(fields: [employeeId], references: [id])
  project    project  @relation(fields: [projectId], references: [id])

  @@map("employee_project")
}

model invoice {
  id                 Int      @id @default(autoincrement())
  invoiceNo          String
  status             String
  totalAmount        String
  invoiceDate        Int
  dueDate            Int
  event_type         String
  payment_reason     String
  description        String
  vendor_or_supplier String
  companyId          Int?
  created_at         DateTime @default(now())
  updated_at         DateTime
  company            company? @relation(fields: [companyId], references: [id])
  journal            journal?
}

model invitation {
  id            Int     @id @default(autoincrement())
  code          String  @unique
  companyId     Int     @map("company_id")
  roleId        Int     @map("role_id")
  createdUserId Int     @map("created_user_id")
  hasUsed       Boolean
  expiredAt     Int
  company       company @relation(fields: [companyId], references: [id])
  createdUser   user    @relation(fields: [createdUserId], references: [id])
  role          role    @relation(fields: [roleId], references: [id])
}

model lineItem {
  id          Int      @id @default(autoincrement())
  account     String
  description String
  debit       Boolean
  amount      Int
  voucherId   Int?
  voucher     voucher? @relation(fields: [voucherId], references: [id])

  @@map("line_item")
}

model project {
  id                  Int               @id @default(autoincrement())
  company_id          Int
  name                String
  completed_percent   Int
  stage               String
  assets              asset[]
  contracts           contract[]
  employeesToProjects employeeProject[]
  journal             journal?
  milestone           milestone[]
  company             company           @relation(fields: [company_id], references: [id])
  sale                sale[]
  value               value[]
  work_rate           work_rate[]
}

model role {
  id                 Int               @id @default(autoincrement())
  companyId          Int               @map("company_id")
  name               String
  permissions        String[]
  invitations        invitation[]
  company            company           @relation(fields: [companyId], references: [id])
  usersCompanysRoles userCompanyRole[]
}

model subscription {
  id         Int     @id @default(autoincrement())
  companyId  Int     @map("company_id")
  plan       String
  price      String
  autoRenew  Boolean
  status     String
  cardId     Int     @map("card_id")
  startDate  Int
  expireDate Int
  card       card    @relation(fields: [cardId], references: [id])
  company    company @relation(fields: [companyId], references: [id])
}

model user {
  id                 Int               @id @default(autoincrement())
  name               String
  fullName           String?
  email              String?
  phone              String?
  credentialId       String            @unique
  publicKey          String
  algorithm          String
  imageId            String?
  invitations        invitation[]
  usersCompanysRoles userCompanyRole[]
}

model userCompanyRole {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId Int
  roleId    Int
  startDate Int
  company   company @relation(fields: [companyId], references: [id])
  role      role    @relation(fields: [roleId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@map("user_company_role")
}

model journal {
  id             Int       @id @default(autoincrement())
  token_contract String?
  token_id       String?
  ocr_id         Int       @unique
  aich_result_id String?
  invoice_id     Int?      @unique
  voucher_id     Int?      @unique
  project_id     Int?      @unique
  contract_id    Int?      @unique
  company_id     Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime
  company        company?  @relation(fields: [company_id], references: [id])
  contract       contract? @relation(fields: [contract_id], references: [id])
  invoice        invoice?  @relation(fields: [invoice_id], references: [id])
  ocr            ocr       @relation(fields: [ocr_id], references: [id])
  project        project?  @relation(fields: [project_id], references: [id])
  voucher        voucher?  @relation(fields: [voucher_id], references: [id])
}

model milestone {
  id         Int     @id @default(autoincrement())
  projectId  Int
  start_date Int
  end_date   Int
  status     String
  project    project @relation(fields: [projectId], references: [id])
}

model ocr {
  id         Int      @id @default(autoincrement())
  image_name String
  image_url  String
  image_size Float
  created_at DateTime @default(now())
  updated_at DateTime
  journal    journal?
}

model sale {
  id         Int     @id @default(autoincrement())
  projectId  Int
  date       String
  totalSales Int
  comparison Int
  project    project @relation(fields: [projectId], references: [id])
}

model value {
  id                      Int     @id @default(autoincrement())
  projectId               Int
  totalRevenue            Int
  totalRevenueGrowthIn30d Int
  totalExpense            Int
  netProfit               Int
  netProfitGrowthIn30d    Int
  netProfitGrowthInYear   Int
  project                 project @relation(fields: [projectId], references: [id])
}

model voucher {
  id         Int        @id @default(autoincrement())
  created_at DateTime   @default(now())
  updated_at DateTime
  journal    journal?
  line_item  lineItem[]
}

model work_rate {
  id              Int     @id @default(autoincrement())
  projectId       Int
  name            String
  avatar          String
  involvementRate Int
  hours           Int
  project         project @relation(fields: [projectId], references: [id])
}
