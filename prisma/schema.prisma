generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model account {
  id        Int         @id @default(autoincrement())
  type      String
  liquidity String
  account   String
  code      String
  name      String
  line_item line_item[]
}

model asset {
  id                 Int     @id @default(autoincrement())
  name               String
  projectId          Int
  type               String
  description        String
  startedDate        String
  endDate            String
  purchasePrice      String
  purchaseAmount     String
  totalPrice         String
  residualValue      String
  estimateUsefulLife String
  depreciationMethod String
  project            project @relation(fields: [projectId], references: [id])
}

model auditReport {
  id                  Int     @id @default(autoincrement())
  company_id          Int
  informationYear     String
  detailedInformation String
  creditRating        String
  link                String
  dateOfUpload        Int
  company             company @relation(fields: [company_id], references: [id])
}

model card {
  id           Int            @id @default(autoincrement())
  company_id   Int
  type         String
  no           String
  expireYear   String
  expireMonth  String
  cvc          String
  name         String
  company      company        @relation(fields: [company_id], references: [id])
  subscription subscription[]
}

model cashflow {
  id        Int     @id @default(autoincrement())
  createdAt Int
  income    Int
  expense   Int
  projectId Int
  project   project @relation(fields: [projectId], references: [id])
}

model client {
  id         Int     @id @default(autoincrement())
  company_id Int
  favorite   Boolean
  company    company @relation(fields: [company_id], references: [id])
}

model company {
  id                Int                 @id @default(autoincrement())
  name              String
  code              String              @unique
  regional          String
  start_date        Int
  created_at        Int
  updated_at        Int
  auditReport       auditReport[]
  card              card[]
  client            client[]
  companyKYC        companyKYC[]
  contract          contract[]
  department        department[]
  employee          employee[]
  invitation        invitation[]
  journal           journal[]
  project           project[]
  subscription      subscription[]
  user_company_role user_company_role[]
}

model companyKYC {
  id                        Int     @id @default(autoincrement())
  companyId                 Int
  address                   String
  representativeName        String
  country                   String
  registrationNumber        String
  registrationDate          String
  contactPerson             String
  contactPhone              String
  contactEmail              String
  website                   String
  registrationCertificateId String
  taxCertificateId          String
  representativeIdType      String
  representativeIdCardId    String
  city                      String
  industry                  String
  legalName                 String
  structure                 String
  zipCode                   String
  created_at                Int
  company                   company @relation(fields: [companyId], references: [id])
}

model contract {
  id                  Int              @id @default(autoincrement())
  aich_result_id      String           @unique
  ocr_id              Int              @unique
  contract_content_id Int?             @unique
  project_id          Int?
  company_id          Int
  company             company          @relation(fields: [company_id], references: [id])
  contractContent     contractContent? @relation(fields: [contract_content_id], references: [id])
  ocr                 ocr              @relation(fields: [ocr_id], references: [id])
  project             project?         @relation(fields: [project_id], references: [id])
  journal             journal?
}

model contractContent {
  id                  Int       @id @default(autoincrement())
  name                String
  signatory           String
  signatory_date      Int
  status              String
  payment_id          Int       @unique
  has_contract_date   Boolean
  contract_start_date Int?
  contract_end_date   Int?
  has_deadline_date   Boolean
  deadline_date       Int?
  has_warranty_date   Boolean
  warranty_start_date Int?
  warranty_end_date   Int?
  service_type        String
  estimated_cost      Int?
  contract            contract?
  payment             payment   @relation(fields: [payment_id], references: [id])
}

model department {
  id         Int        @id @default(autoincrement())
  company_id Int
  name       String
  company    company    @relation(fields: [company_id], references: [id])
  employee   employee[]
}

model employee {
  id               Int        @id @default(autoincrement())
  name             String
  imageId          String?
  department_id    Int
  company_id       Int
  salary           Int
  insurancePayment Int
  salaryPayMode    String
  payFrequency     String
  startDate        Int
  endDate          Int?
  bonus            Int
  company          company    @relation(fields: [company_id], references: [id])
  department       department @relation(fields: [department_id], references: [id])
  salaries         salary[]
  workRate         workRate[]
}

model invitation {
  id              Int     @id @default(autoincrement())
  code            String  @unique
  company_id      Int
  role_id         Int
  created_user_id Int
  hasUsed         Boolean
  expiredAt       Int
  company         company @relation(fields: [company_id], references: [id])
  user            user    @relation(fields: [created_user_id], references: [id])
  role            role    @relation(fields: [role_id], references: [id])
}

model invoice {
  id                 Int      @id @default(autoincrement())
  date               Int
  event_type         String
  payment_reason     String
  description        String
  vendor_or_supplier String
  payment_id         Int      @unique
  created_at         DateTime @default(now())
  updated_at         DateTime
  project_id         Int?
  payment            payment  @relation(fields: [payment_id], references: [id])
  project            project? @relation(fields: [project_id], references: [id])
  journal            journal?
}

model journal {
  id             Int       @id @default(autoincrement())
  token_contract String?
  token_id       String?
  ocr_id         Int?      @unique
  aich_result_id String?   @unique
  invoice_id     Int?      @unique
  voucher_id     Int?      @unique
  project_id     Int?      @unique
  contract_id    Int?      @unique
  company_id     Int?
  created_at     DateTime  @default(now())
  updated_at     DateTime
  company        company?  @relation(fields: [company_id], references: [id])
  contract       contract? @relation(fields: [contract_id], references: [id])
  invoice        invoice?  @relation(fields: [invoice_id], references: [id])
  ocr            ocr?      @relation(fields: [ocr_id], references: [id])
  project        project?  @relation(fields: [project_id], references: [id])
  voucher        voucher?  @relation(fields: [voucher_id], references: [id])
}

model line_item {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String
  debit       Boolean
  account_id  Int
  voucherId   Int?
  account     account  @relation(fields: [account_id], references: [id])
  voucher     voucher? @relation(fields: [voucherId], references: [id])
}

model milestone {
  id         Int     @id @default(autoincrement())
  projectId  Int
  start_date Int
  end_date   Int
  status     String
  project    project @relation(fields: [projectId], references: [id])
}

model ocr {
  id        Int       @id @default(autoincrement())
  imageName String    @map("image_name")
  imageUrl  String    @map("image_url")
  imageSize Float     @map("image_size")
  status    String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  contract  contract?
  journal   journal?
}

model project {
  id               Int               @id @default(autoincrement())
  companyId        Int               @map("company_id")
  name             String
  completedPercent Int               @map("completed_percent")
  stage            String
  totalExpense     Int?
  totalIncome      Int?
  imageId          String?
  assets           asset[]
  cashflow         cashflow[]
  contracts        contract[]
  invoices         invoice[]
  journals         journal?
  milestones       milestone[]
  company          company           @relation(fields: [companyId], references: [id])
  sales            sale[]
  values           value[]
  workRates        workRate[]
  report           report[]
}

model payment {
  id                 Int              @id @default(autoincrement())
  isRevenue          Boolean
  price              Int
  hasTax             Boolean
  taxPercentage      Int
  hasFee             Boolean
  fee                Int
  paymentMethod      String
  paymentPeriod      String
  installmentPeriod  Int
  paymentAlreadyDone Int
  paymentStatus      String
  progress           Int
  created_at         DateTime         @default(now())
  updated_at         DateTime
  contractContent    contractContent?
  invoice            invoice?
}

model project {
  id                Int         @id @default(autoincrement())
  company_id        Int
  name              String
  completed_percent Int
  stage             String
  totalExpense      Int?
  totalIncome       Int?
  imageId           String?
  asset             asset[]
  cashflow          cashflow[]
  contract          contract[]
  invoice           invoice[]
  journal           journal?
  milestone         milestone[]
  company           company     @relation(fields: [company_id], references: [id])
  report            report[]
  sale              sale[]
  value             value[]
  workRate          workRate[]
}

model role {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  permissions       String[]
  invitation        invitation[]
  user_company_role user_company_role[]
}

model report {
  id        Int     @id @default(autoincrement())
  createdAt Int     @map("created_at")
  name      String
  periodFrom Int
  periodTo   Int
  type      String
  reportType String
  status    String
  remainingSeconds Int?
  paused Boolean?
  projectId Int?
  reportLink String?
  downloadLink String?
  blockChaonExplorerLink String?
  evidenceId String?
  project project?  @relation(fields: [projectId], references: [id])
}

model salary {
  id               Int      @id @default(autoincrement())
  employeeId       Int
  salary           Int
  description      String
  date             Int
  insurancePayment Int
  bonus            Int
  employee         employee @relation(fields: [employeeId], references: [id])
}

model sale {
  id         Int     @id @default(autoincrement())
  projectId  Int
  date       String
  totalSales Int
  comparison Int
  project    project @relation(fields: [projectId], references: [id])
}

model salary {
  id               Int      @id @default(autoincrement())
  employeeId       Int
  salary           Int
  insurancePayment Int
  bonus            Int
  description      String
  month            String // 2024-05
  employee         employee @relation(fields: [employeeId], references: [id])
}

model user {
  id                Int                 @id @default(autoincrement())
  name              String
  fullName          String?
  email             String?
  phone             String?
  credentialId      String              @unique
  publicKey         String
  algorithm         String
  imageId           String?
  invitation        invitation[]
  user_company_role user_company_role[]
}

model userCompanyRole {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId Int
  roleId    Int
  startDate Int
  company   company @relation(fields: [companyId], references: [id])
  role      role    @relation(fields: [roleId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@id([userId, companyId, roleId])
}

model value {
  id                      Int     @id @default(autoincrement())
  projectId               Int
  totalRevenue            Int
  totalRevenueGrowthIn30d Int
  totalExpense            Int
  netProfit               Int
  netProfitGrowthIn30d    Int
  netProfitGrowthInYear   Int
  project                 project @relation(fields: [projectId], references: [id])
}

model voucher {
  id         Int         @id @default(autoincrement())
  no         String
  created_at DateTime    @default(now())
  updated_at DateTime
  journal    journal?
  line_item  line_item[]
}

model workRate {
  id              Int     @id @default(autoincrement())
  projectId       Int
  employeeId      Int
  involvementRate Int?    @map("involvement_rate")
  hours           Int
  month           String
  project         project @relation(fields: [projectId], references: [id])
  employee        employee @relation(fields: [employeeId], references: [id])
}
