generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int     @id @default(autoincrement())
  companyId  Int     @default(0) @map("company_id")
  system     String // Info: (20240625 - Murky) ex "IFRS" 
  type       String // Info: (20240625 - Murky) ex "Asset"
  debit      Boolean // Info: (20240625 - Murky) true: debit, false: credit
  liquidity  Boolean
  code       String  @unique
  name       String // Info: (20240625 - Murky) empty if is not sub account
  forUser    Boolean @map("for_user") // Info: (20240625 - Murky) is account the last layer of account tree
  parentCode String  @map("parent_code")
  rootCode   String  @map("root_code")
  createdAt  Int     @map("created_at")
  updatedAt  Int     @map("updated_at")
  level      Int     @default(0)
  deletedAt  Int?    @map("deleted_at")

  company  Company    @relation(fields: [companyId], references: [id])
  parent   Account    @relation("Parent", fields: [parentCode], references: [code])
  root     Account    @relation("Root", fields: [rootCode], references: [code])
  child    Account[]  @relation("Parent")
  leaf     Account[]  @relation("Root")
  lineItem LineItem[]

  @@map("account")
}

model Asset {
  id                      Int     @id @default(autoincrement())
  companyId               Int     @map("company_id")
  name                    String  @map("asset_name")
  type                    String  @map("asset_type")
  number                  String  @map("asset_number")
  acquisitionDate         Int     @map("acquisition_date")
  purchasePrice           Decimal @map("purchase_price") @db.Decimal(20, 2)
  accumulatedDepreciation Decimal @default(0) @map("accumulated_depreciation") @db.Decimal(20, 2)
  residualValue           Decimal @map("residual_value") @db.Decimal(20, 2)
  remainingLife           Int     @map("remaining_life")
  status                  String  @default("normal") @map("asset_status")
  depreciationStart       Int     @map("depreciation_start")
  depreciationMethod      String  @map("depreciation_method")
  usefulLife              Int     @map("useful_life")
  note                    String  @map("note")
  createdAt               Int     @map("created_at")
  updatedAt               Int     @map("updated_at")
  deletedAt               Int?    @map("deleted_at")

  assetVouchers AssetVoucher[]

  company Company @relation(fields: [companyId], references: [id])

  @@map("asset")
}

model AssetVoucher {
  id        Int  @id @default(autoincrement())
  assetId   Int  @map("asset_id")
  voucherId Int  @map("voucher_id")
  createdAt Int  @map("created_at")
  updatedAt Int  @map("updated_at")
  deletedAt Int? @map("deleted_at")

  asset   Asset   @relation(fields: [assetId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@unique([assetId, voucherId])
  @@map("asset_voucher")
}

model AuditReport {
  id              Int     @id @default(autoincrement())
  companyId       Int     @map("company_id")
  informationYear String  @map("information_year")
  creditRating    String  @map("credit_rating")
  createdAt       Int     @map("created_at")
  updatedAt       Int     @map("updated_at")
  reportId        Int     @map("report_id")
  company         Company @relation(fields: [companyId], references: [id])
  report          Report  @relation(fields: [reportId], references: [id])
  deletedAt       Int?    @map("deleted_at")

  @@map("audit_report")
}

model Admin {
  id        Int     @id @default(autoincrement())
  userId    Int     @map("user_id")
  companyId Int     @map("company_id")
  roleId    Int     @map("role_id")
  email     String
  status    Boolean
  startDate Int     @map("start_date")
  endDate   Int?    @map("end_date")
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  deletedAt Int?    @map("deleted_at")
  company   Company @relation(fields: [companyId], references: [id])
  role      Role    @relation(fields: [roleId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@map("admin")
}

model Authentication {
  id           Int    @id @default(autoincrement())
  userId       Int    @map("user_id")
  credentialId String @unique @map("credential_id")
  method       String
  provider     String
  authData     Json   @map("auth_data")
  createdAt    Int    @map("created_at")
  updatedAt    Int    @map("updated_at")
  deletedAt    Int?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("authentication")
}

model AccountingSetting {
  id                 Int     @id @default(autoincrement())
  companyId          Int     @map("company_id")
  salesTaxTaxable    Boolean @map("sales_tax_taxable")
  salesTaxRate       Float   @map("sales_tax_rate")
  purchaseTaxTaxable Boolean @map("purchase_tax_taxable")
  purchaseTaxRate    Float   @map("purchase_tax_rate")
  returnPeriodicity  String  @map("return_periodicity")
  currency           String

  company Company @relation(fields: [companyId], references: [id])

  shortcuts Shortcut[]

  @@map("accounting_setting")
}

model CustomerVendor {
  id        Int    @id @default(autoincrement())
  companyId Int    @map("company_id")
  name      String
  taxId     String @map("tax_id")
  type      String
  note      String
  createdAt Int    @map("created_at")
  updatedAt Int    @map("updated_at")
  deletedAt Int?   @map("deleted_at")

  company Company @relation(fields: [companyId], references: [id])

  @@map("customer_vendor")
}

model Company {
  id          Int    @id @default(autoincrement())
  name        String
  taxId       String @map("tax_id")
  tag         String @default("all")
  imageFileId Int    @unique @map("image_file_id")
  startDate   Int    @map("start_date")
  createdAt   Int    @map("created_at")
  updatedAt   Int    @map("updated_at")
  deletedAt   Int?   @map("deleted_at")

  imageFile File @relation("company_image_file", fields: [imageFileId], references: [id])

  admins                     Admin[]
  accountingSettings         AccountingSetting[]
  customerVendors            CustomerVendor[]
  companySettings            CompanySetting[]
  contracts                  Contract[]
  companyKYCs                CompanyKYC[]
  departments                Department[]
  employees                  Employee[]
  invitations                Invitation[]
  journals                   Journal[]
  orders                     Order[]
  ocrs                       Ocr[]
  projects                   Project[]
  subscriptions              Subscription[]
  auditReports               AuditReport[]
  incomeExpenses             IncomeExpense[]
  accounts                   Account[]
  reports                    Report[]
  voucherSalaryRecordFolders VoucherSalaryRecordFolder[]
  Asset                      Asset[]

  @@map("company")
}

model CompanyKYC {
  id                            Int     @id @default(autoincrement())
  companyId                     Int     @map("company_id")
  address                       String
  representativeName            String  @map("representative_name")
  country                       String
  registrationNumber            String  @map("registration_number")
  registrationDate              String  @map("registration_date")
  contactPerson                 String  @map("contact_person")
  contactPhone                  String  @map("contact_phone")
  contactEmail                  String  @map("contact_email")
  website                       String
  registrationCertificateFileId Int     @unique @map("registration_certificate_file_id") // Info: (2024839 - Murky) File ID
  taxCertificateFileId          Int     @unique @map("tax_certificate_file_id")
  representativeIdType          String  @map("representative_id_type")
  representativeIdCardFileId    Int     @unique @map("representative_id_card_file_id")
  city                          String
  industry                      String
  legalName                     String  @map("legal_name")
  structure                     String
  zipCode                       String  @map("zip_code")
  status                        String
  reviewer                      String?
  note                          String?
  reviewAt                      Int?    @map("review_at")
  createdAt                     Int     @map("created_at")
  updatedAt                     Int     @map("updated_at")
  deletedAt                     Int?    @map("deleted_at")

  company                     Company @relation(fields: [companyId], references: [id])
  registrationCertificateFile File    @relation("registration_certificate_file", fields: [registrationCertificateFileId], references: [id])
  taxCertificateFile          File    @relation("tax_certificate_file", fields: [taxCertificateFileId], references: [id])
  representativeIdCardFile    File    @relation("representative_id_card_file", fields: [representativeIdCardFileId], references: [id])

  @@map("company_kyc")
}

model CompanySetting {
  id                 Int    @id @default(autoincrement())
  companyId          Int    @unique @map("company_id")
  taxSerialNumber    String @map("tax_serial_number")
  representativeName String @map("representative_name")
  country            String
  phone              String
  address            String
  createdAt          Int    @map("created_at")
  updatedAt          Int    @map("updated_at")
  deletedAt          Int?   @map("deleted_at")

  company Company @relation(fields: [companyId], references: [id])

  @@map("company_setting")
}

model Contract {
  id                Int       @id @default(autoincrement())
  fileUrl           String    @map("file_url")
  projectId         Int?      @map("project_id")
  companyId         Int       @map("company_id")
  name              String
  signatory         String
  signatoryDate     Int       @map("signatory_date")
  status            String
  paymentId         Int       @unique @map("payment_id")
  hasContractDate   Boolean   @map("has_contract_date")
  contractStartDate Int?      @map("contract_start_date")
  contractEndDate   Int?      @map("contract_end_date")
  hasDeadlineDate   Boolean   @map("has_deadline_date")
  deadlineDate      Int?      @map("deadline_date")
  hasWarrantyDate   Boolean   @map("has_warranty_date")
  warrantyStartDate Int?      @map("warranty_start_date")
  warrantyEndDate   Int?      @map("warranty_end_date")
  serviceType       String    @map("service_type")
  estimatedCost     Int?      @map("estimated_cost")
  createdAt         Int       @map("created_at")
  updatedAt         Int       @map("updated_at")
  deletedAt         Int?      @map("deleted_at")
  journal           Journal[]

  company Company  @relation(fields: [companyId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  payment Payment  @relation(fields: [paymentId], references: [id])

  @@map("contract")
}

model Department {
  id        Int        @id @default(autoincrement())
  companyId Int        @map("company_id")
  name      String
  createdAt Int        @map("created_at")
  updatedAt Int        @map("updated_at")
  deletedAt Int?       @map("deleted_at")
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]

  @@map("department")
}

model Employee {
  id               Int               @id @default(autoincrement())
  name             String
  imageId          String?           @map("image_id")
  departmentId     Int               @map("department_id")
  companyId        Int               @map("company_id")
  salary           Int
  insurancePayment Int               @map("insurance_payment")
  bonus            Int
  salaryPayMode    String            @map("salary_pay_mode")
  payFrequency     String            @map("pay_frequency")
  startDate        Int               @map("start_date")
  endDate          Int?              @map("end_date")
  createdAt        Int               @map("created_at")
  updatedAt        Int               @map("updated_at")
  deletedAt        Int?              @map("deleted_at")
  company          Company           @relation(fields: [companyId], references: [id])
  department       Department        @relation(fields: [departmentId], references: [id])
  employeeProjects EmployeeProject[]
  salaryRecords    SalaryRecord[]

  @@map("employee")
}

model EmployeeProject {
  id         Int        @id @default(autoincrement())
  employeeId Int        @map("employee_id")
  projectId  Int        @map("project_id")
  startDate  Int        @map("start_date")
  endDate    Int?       @map("end_date")
  createdAt  Int        @map("created_at")
  updatedAt  Int        @map("updated_at")
  deletedAt  Int?       @map("deleted_at")
  employee   Employee   @relation(fields: [employeeId], references: [id])
  project    Project    @relation(fields: [projectId], references: [id])
  workRates  WorkRate[]

  @@map("employee_project")
}

model File {
  id                    Int     @id @default(autoincrement())
  name                  String // Info: (20240830 - Murky) Name example: "100000.jpg"
  size                  Float // Info: (20240830 - Murky) File Size in bytes
  mimeType              String  @map("mime_type") // Info: (20240830 - Murky) File Mime Type ex: image/jpeg
  type                  String //Info: (20240830 - Murky) FileFolder Type ex: invoice, tmp
  url                   String // Info: (20240830 - Murky) File URL, it can be local folder or google bucket
  isEncrypted           Boolean @map("is_encrypted") // Info: (20240830 - Murky) File is Encrypted by encryptSymmetricKey
  encryptedSymmetricKey String // Info: (20240830 - Murky) File Encrypt Symmetric Key
  iv                    Bytes   @default("") // Info: (20240830 - Murky) File Encrypt IV
  createdAt             Int     @map("created_at")
  updatedAt             Int     @map("updated_at")
  deletedAt             Int?    @map("deleted_at")

  companyImageFile            Company?       @relation("company_image_file")
  invoiceImageFile            Invoice?       @relation("invoice_image_file")
  ocrImageFile                Ocr?           @relation("ocr_image_file")
  userImageFile               User?          @relation("user_image_file")
  projectImageFile            Project?       @relation("project_image_file")
  registrationCertificateFile CompanyKYC?    @relation("registration_certificate_file")
  taxCertificateFile          CompanyKYC?    @relation("tax_certificate_file")
  representativeIdCardFile    CompanyKYC?    @relation("representative_id_card_file")
  personalIdFile              KYCBookkeeper? @relation("kyc_personal_id_file")
  certificationFile           KYCBookkeeper? @relation("kyc_certification_file")

  @@map("file")
}

model Invoice {
  id               Int     @id @default(autoincrement())
  journalId        Int     @unique @map("journal_id")
  paymentId        Int     @unique @map("payment_id")
  number           String  @unique
  type             String
  date             Int
  eventType        String  @map("event_type")
  paymentReason    String  @map("payment_reason")
  description      String
  vendorTaxId      String  @map("vendor_tax_id")
  vendorOrSupplier String  @map("vendor_or_supplier")
  imageFileId      Int?    @unique @map("image_file_id")
  deductible       Boolean
  createdAt        Int     @map("created_at")
  updatedAt        Int     @map("updated_at")
  deletedAt        Int?    @map("deleted_at")
  payment          Payment @relation(fields: [paymentId], references: [id])
  journal          Journal @relation(fields: [journalId], references: [id])
  imageFile        File?   @relation("invoice_image_file", fields: [imageFileId], references: [id])

  @@map("invoice")
}

model Invitation {
  id            Int     @id @default(autoincrement())
  companyId     Int     @map("company_id")
  roleId        Int     @map("role_id")
  createdUserId Int     @map("created_user_id")
  code          String  @unique
  email         String
  phone         String?
  hasUsed       Boolean @map("has_used")
  expiredAt     Int     @map("expired_at")
  createdAt     Int     @map("created_at")
  updatedAt     Int     @map("updated_at")
  deletedAt     Int?    @map("deleted_at")
  company       Company @relation(fields: [companyId], references: [id])
  createdUser   User    @relation(fields: [createdUserId], references: [id])
  role          Role    @relation(fields: [roleId], references: [id])

  @@map("invitation")
}

model IncomeExpense {
  id        Int      @id @default(autoincrement())
  income    Int
  expense   Int
  companyId Int      @map("company_id")
  projectId Int?     @map("project_id")
  createdAt Int      @map("created_at")
  updatedAt Int      @map("updated_at")
  deletedAt Int?     @map("deleted_at")
  company   Company  @relation(fields: [companyId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@map("income_expense")
}

model Journal {
  id            Int      @id @default(autoincrement())
  tokenContract String?  @map("token_contract")
  tokenId       String?  @map("token_id")
  aichResultId  String?  @unique @map("aich_result_id")
  projectId     Int?     @unique @map("project_id")
  contractId    Int?     @unique @map("contract_id")
  companyId     Int      @map("company_id")
  event         String   @map("event")
  createdAt     Int      @map("created_at")
  updatedAt     Int      @map("updated_at")
  deletedAt     Int?     @map("deleted_at")
  invoice       Invoice?
  voucher       Voucher?

  company  Company   @relation(fields: [companyId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])
  project  Project?  @relation(fields: [projectId], references: [id])

  @@map("journal")
}

model KYCBookkeeper {
  id                  Int     @id @default(autoincrement())
  userId              Int     @map("user_id")
  name                String
  birthDate           String  @map("birth_date")
  email               String
  phone               String
  qualification       Boolean
  certificationNumber String  @map("certification_number")
  personalIdType      String  @map("personal_id_type")
  personalIdFileId    Int     @unique @map("personal_id_file_id")
  certificationFileId Int     @unique @map("certification_file_id")
  createdAt           Int     @map("created_at")
  updatedAt           Int     @map("updated_at")
  deletedAt           Int?    @map("deleted_at")

  user              User @relation(fields: [userId], references: [id])
  personalIdFile    File @relation("kyc_personal_id_file", fields: [personalIdFileId], references: [id])
  certificationFile File @relation("kyc_certification_file", fields: [certificationFileId], references: [id])

  @@map("kyc_bookkeeper")
}

model LineItem {
  id          Int     @id @default(autoincrement())
  amount      Int
  description String
  debit       Boolean
  accountId   Int     @map("account_id")
  voucherId   Int     @map("voucher_id")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")
  account     Account @relation(fields: [accountId], references: [id])
  voucher     Voucher @relation(fields: [voucherId], references: [id])

  @@map("line_item")
}

model Milestone {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  startDate Int?    @map("start_date")
  endDate   Int?    @map("end_date")
  status    String
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  deletedAt Int?    @map("deleted_at")
  project   Project @relation(fields: [projectId], references: [id])

  @@map("milestone")
}

model News {
  id        Int    @id @default(autoincrement())
  type      String
  title     String
  content   String
  createdAt Int    @map("created_at")
  updatedAt Int    @map("updated_at")
  deletedAt Int?   @map("deleted_at")

  @@map("news")
}

model Ocr {
  id           Int     @id @default(autoincrement())
  aichResultId String  @unique @map("aich_result_id")
  companyId    Int     @map("company_id")
  imageFileId  Int     @unique @map("image_file_id")
  status       String
  type         String // Info (20240626 - Jacky) ex: "invoice", "contract"
  createdAt    Int     @map("created_at")
  updatedAt    Int     @map("updated_at")
  deletedAt    Int?    @map("deleted_at")
  company      Company @relation(fields: [companyId], references: [id])
  imageFile    File    @relation("ocr_image_file", fields: [imageFileId], references: [id])

  @@map("ocr")
}

model Order {
  id        Int     @id @default(autoincrement())
  companyId Int     @map("company_id")
  planId    Int     @map("plan_id")
  status    String
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  company   Company @relation(fields: [companyId], references: [id])
  plan      Plan    @relation(fields: [planId], references: [id])
  deletedAt Int?    @map("deleted_at")

  paymentRecords PaymentRecord[]

  @@map("order")
}

model Project {
  id               Int               @id @default(autoincrement())
  companyId        Int               @map("company_id")
  name             String
  completedPercent Int               @map("completed_percent")
  stage            String
  imageFileId      Int               @unique @map("image_file_id")
  createdAt        Int               @map("created_at")
  updatedAt        Int               @map("updated_at")
  deletedAt        Int?              @map("deleted_at")
  contracts        Contract[]
  journals         Journal[]
  milestones       Milestone[]
  report           Report[]
  sales            Sale[]
  value            Value?
  employeeProjects EmployeeProject[]
  income_expenses  IncomeExpense[]

  company   Company @relation(fields: [companyId], references: [id])
  imageFile File    @relation("project_image_file", fields: [imageFileId], references: [id])

  @@map("project")
}

model Payment {
  id                Int       @id @default(autoincrement())
  isRevenue         Boolean   @map("is_revenue")
  price             Int
  hasTax            Boolean   @map("has_tax")
  taxPercentage     Int       @map("tax_percentage")
  taxPrice          Int       @map("tax_price")
  hasFee            Boolean   @map("has_fee")
  fee               Int
  method            String    @map("method")
  period            String    @map("period")
  installmentPeriod Int       @map("installment_period")
  alreadyPaid       Int       @map("already_paid")
  status            String    @map("status")
  progress          Int
  createdAt         Int       @map("created_at")
  updatedAt         Int       @map("updated_at")
  deletedAt         Int?      @map("deleted_at")
  invoice           Invoice?
  contract          Contract?

  @@map("payment")
}

model PaymentRecord {
  id            Int    @id @default(autoincrement())
  orderId       Int    @map("order_id")
  // Info: (20240604 - Jacky) Third party payment transaction id 
  transactionId String @map("transaction_id")
  date          Int
  description   String
  amount        Int
  method        String
  status        String // Info: (20240621 - Murky) completed、failed、pending
  createdAt     Int    @map("created_at")
  updatedAt     Int    @map("updated_at")
  deletedAt     Int?   @map("deleted_at")

  order Order @relation(fields: [orderId], references: [id])

  @@map("payment_record")
}

model Plan {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  description   String
  monthlyFee    Int            @map("monthly_fee")
  annualFee     Int            @map("annual_fee")
  createdAt     Int            @map("created_at")
  updatedAt     Int            @map("updated_at")
  deletedAt     Int?           @map("deleted_at")
  orders        Order[]
  subscriptions Subscription[]

  @@map("plan")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions String[]
  lastLoginAt Int          @default(0) @map("last_login_at")
  createdAt   Int          @map("created_at")
  updatedAt   Int          @map("updated_at")
  deletedAt   Int?         @map("deleted_at")
  admins      Admin[]
  invitations Invitation[]
  userRoles   UserRole[]

  @@map("role")
}

model Report {
  id                     Int           @id @default(autoincrement())
  companyId              Int           @map("company_id")
  tokenContract          String?       @map("token_contract")
  tokenId                String?       @map("token_id")
  name                   String
  from                   Int
  to                     Int
  type                   String
  reportType             String        @map("report_type")
  status                 String
  remainingSeconds       Int?          @map("remaining_seconds")
  paused                 Boolean?
  projectId              Int?          @map("project_id")
  reportLink             String?       @map("report_link")
  downloadLink           String?       @map("download_link")
  blockChainExplorerLink String?       @map("block_chain_explorer_link")
  evidenceId             String?       @map("evidence_id")
  content                Json          @map("content")
  createdAt              Int           @map("created_at")
  updatedAt              Int           @map("updated_at")
  deletedAt              Int?          @map("deleted_at")
  auditReports           AuditReport[]
  company                Company       @relation(fields: [companyId], references: [id])
  project                Project?      @relation(fields: [projectId], references: [id])

  @@map("report")
}

model Subscription {
  id          Int     @id @default(autoincrement())
  companyId   Int     @map("company_id")
  planId      Int     @map("plan_id")
  status      Boolean
  startDate   Int     @map("start_date")
  expiredDate Int     @map("expired_date")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")
  company     Company @relation(fields: [companyId], references: [id])
  plan        Plan    @relation(fields: [planId], references: [id])

  @@map("subscription")
}

model Sale {
  id         Int     @id @default(autoincrement())
  projectId  Int     @map("project_id")
  date       String
  totalSales Int     @map("total_sales")
  comparison Int
  createdAt  Int     @map("created_at")
  updatedAt  Int     @map("updated_at")
  deletedAt  Int?    @map("deleted_at")
  project    Project @relation(fields: [projectId], references: [id])

  @@map("sale")
}

model SalaryRecord {
  id                   Int                   @id @default(autoincrement())
  employeeId           Int                   @map("employee_id")
  startDate            Int                   @map("start_date")
  endDate              Int                   @map("end_date")
  salary               Int
  insurancePayment     Int                   @map("insurance_payment")
  bonus                Int
  description          String
  workingHour          Int                   @map("working_hour")
  confirmed            Boolean
  createdAt            Int                   @map("created_at")
  updatedAt            Int                   @map("updated_at")
  deletedAt            Int?                  @map("deleted_at")
  employee             Employee              @relation(fields: [employeeId], references: [id])
  voucherSalaryRecords VoucherSalaryRecord[]

  @@map("salary_record")
}

model SalaryRecordProjectHour {
  id             Int  @id @default(autoincrement())
  projectId      Int  @map("project_id")
  salaryRecordId Int  @map("salary_record_id")
  hour           Int
  createdAt      Int  @map("created_at")
  updatedAt      Int  @map("updated_at")
  deletedAt      Int? @map("deleted_at")

  @@map("salary_record_project_hour")
}

model Shortcut {
  id                  Int      @id @default(autoincrement())
  accountingSettingId Int      @map("accounting_setting_id")
  actionName          String   @map("action_name")
  description         String
  fieldList           Json     @map("field_list")
  keyList             String[] @map("key_list")
  createdAt           Int      @map("created_at")
  updatedAt           Int      @map("updated_at")
  deletedAt           Int?     @map("deleted_at")

  accountingSetting AccountingSetting @relation(fields: [accountingSettingId], references: [id])

  @@map("shortcut")
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String?
  imageFileId     Int              @unique @map("image_File_id")
  createdAt       Int              @map("created_at")
  updatedAt       Int              @map("updated_at")
  deletedAt       Int?             @map("deleted_at")
  admins          Admin[]
  invitations     Invitation[]
  authentications Authentication[]
  userAgreements  UserAgreement[]
  userRoles       UserRole[]
  kycBookkeepers  KYCBookkeeper[]

  imageFile File @relation("user_image_file", fields: [imageFileId], references: [id])

  @@map("user")
}

model UserAgreement {
  id            Int    @id @default(autoincrement())
  userId        Int    @map("user_id")
  agreementHash String @map("agreement_hash")
  createdAt     Int    @map("created_at")
  updatedAt     Int    @map("updated_at")
  deletedAt     Int?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, agreementHash]) // Info: (20240816 - Jacky) Ensures a user can't agree to the same term more than once
  @@map("user_agreement")
}

model UserActionLog {
  id                Int    @id @default(autoincrement())
  sessionId         String @map("session_id")
  userId            Int    @map("user_id")
  actionType        String @map("action_type")
  actionDescription String @map("action_description")
  actionTime        Int    @map("action_time")
  ipAddress         String @map("ip_address")
  userAgent         String @map("user_agent")
  apiEndpoint       String @map("api_endpoint")
  httpMethod        String @map("http_method")
  requestPayload    Json   @map("request_payload")
  httpStatusCode    Int    @map("http_status_code")
  statusMessage     String @map("status_message")

  @@map("user_action_log")
}

model UserSetting {
  id                                Int     @id @default(autoincrement())
  userId                            Int     @map("user_id")
  firstName                         String? @map("first_name")
  lastName                          String? @map("last_name")
  country                           String?
  language                          String?
  phone                             String?
  systemNotification                Boolean @map("system_notification")
  updateAndSubscriptionNotification Boolean @map("update_and_subscription_notification")
  emailNotification                 Boolean @map("email_notification")
  createdAt                         Int     @map("created_at")
  updatedAt                         Int     @map("updated_at")
  deletedAt                         Int?    @map("deleted_at")

  @@map("user_setting")
}

model UserRole {
  id        Int  @id @default(autoincrement())
  userId    Int  @map("user_id")
  roleId    Int  @map("role_id")
  createdAt Int  @map("created_at")
  updatedAt Int  @map("updated_at")
  deletedAt Int? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_role")
}

model Voucher {
  id                   Int                   @id @default(autoincrement())
  journalId            Int                   @unique @map("journal_id")
  no                   String
  createdAt            Int                   @map("created_at")
  updatedAt            Int                   @map("updated_at")
  deletedAt            Int?                  @map("deleted_at")
  lineItems            LineItem[]
  voucherSalaryRecords VoucherSalaryRecord[]

  journal      Journal        @relation(fields: [journalId], references: [id])
  AssetVoucher AssetVoucher[]

  @@map("voucher")
}

model VoucherSalaryRecord {
  id                          Int                       @id @default(autoincrement())
  voucherId                   Int                       @map("voucher_id")
  salaryRecordId              Int                       @map("salary_record_id")
  voucherSalaryRecordFolderId Int                       @map("voucher_salary_record_folder_id")
  createdAt                   Int                       @map("created_at")
  updatedAt                   Int                       @map("updated_at")
  deletedAt                   Int?                      @map("deleted_at")
  voucher                     Voucher                   @relation(fields: [voucherId], references: [id])
  salaryRecord                SalaryRecord              @relation(fields: [salaryRecordId], references: [id])
  voucherSalaryRecordFolder   VoucherSalaryRecordFolder @relation(fields: [voucherSalaryRecordFolderId], references: [id])

  @@map("voucher_salary_record")
}

model VoucherSalaryRecordFolder {
  id                   Int                   @id @default(autoincrement())
  companyId            Int                   @map("company_id")
  name                 String
  createdAt            Int                   @map("created_at")
  updatedAt            Int                   @map("updated_at")
  deletedAt            Int?                  @map("deleted_at")
  company              Company               @relation(fields: [companyId], references: [id])
  voucherSalaryRecords VoucherSalaryRecord[]

  @@map("voucher_salary_record_folder")
}

model Value {
  id                      Int     @id @default(autoincrement())
  projectId               Int     @unique @map("project_id")
  totalRevenue            Int     @map("total_revenue")
  totalRevenueGrowthIn30d Int     @map("total_revenue_growth_in_30d")
  totalExpense            Int     @map("total_expense")
  netProfit               Int     @map("net_profit")
  netProfitGrowthIn30d    Int     @map("net_profit_growth_in_30d")
  netProfitGrowthInYear   Int     @map("net_profit_growth_in_year")
  createdAt               Int     @map("created_at")
  updatedAt               Int     @map("updated_at")
  deletedAt               Int?    @map("deleted_at")
  project                 Project @relation(fields: [projectId], references: [id])

  @@map("value")
}

model WorkRate {
  id                Int             @id @default(autoincrement())
  employeeProjectId Int             @map("employee_project_id")
  involvementRate   Int?            @map("involvement_rate")
  expectedHours     Int             @map("expected_hours")
  actualHours       Int             @map("actual_hours")
  createdAt         Int             @map("created_at")
  updatedAt         Int             @map("updated_at")
  deletedAt         Int?            @map("deleted_at")
  employeeProject   EmployeeProject @relation(fields: [employeeProjectId], references: [id])

  @@map("work_rate")
}
