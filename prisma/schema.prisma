generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Account {
  id         Int     @id @default(autoincrement())
  companyId  Int     @default(0) @map("company_id")
  system     String // Info: (20240625 - Murky) ex "IFRS" 
  type       String // Info: (20240625 - Murky) ex "Asset"
  debit      Boolean // Info: (20240625 - Murky) true: debit, false: credit
  liquidity  Boolean
  code       String
  name       String // Info: (20240625 - Murky) empty if is not sub account
  forUser    Boolean @map("for_user") // Info: (20240625 - Murky) is account the last layer of account tree
  parentCode String  @map("parent_code")
  rootCode   String  @map("root_code")
  parentId   Int     @map("parent_id")
  rootId     Int     @map("root_id")
  createdAt  Int     @map("created_at")
  updatedAt  Int     @map("updated_at")
  level      Int     @default(0)
  deletedAt  Int?    @map("deleted_at")
  note       String? @map("note")

  company  Company    @relation(fields: [companyId], references: [id])
  parent   Account    @relation("Parent", fields: [parentId], references: [id])
  root     Account    @relation("Root", fields: [rootId], references: [id])
  child    Account[]  @relation("Parent")
  leaf     Account[]  @relation("Root")
  lineItem LineItem[]

  @@map("account")
}

model Asset {
  id                 Int    @id @default(autoincrement())
  companyId          Int    @map("company_id")
  createdUserId      Int    @map("created_user_id")
  name               String
  type               String
  number             String
  acquisitionDate    Int    @map("acquisition_date")
  purchasePrice      Float  @map("purchase_price")
  residualValue      Float  @map("residual_value")
  status             String
  depreciationStart  Int    @map("depreciation_start")
  depreciationMethod String @map("depreciation_method")
  usefulLife         Int    @map("useful_life")
  note               String
  createdAt          Int    @map("created_at")
  updatedAt          Int    @map("updated_at")
  deletedAt          Int?   @map("deleted_at")

  assetVouchers AssetVoucher[]

  company Company @relation(fields: [companyId], references: [id])
  user    User    @relation(fields: [createdUserId], references: [id])

  @@map("asset")
}

model AssetVoucher {
  id        Int  @id @default(autoincrement())
  assetId   Int  @map("asset_id")
  voucherId Int  @map("voucher_id")
  createdAt Int  @map("created_at")
  updatedAt Int  @map("updated_at")
  deletedAt Int? @map("deleted_at")

  asset   Asset   @relation(fields: [assetId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("asset_voucher")
}

model AuditReport {
  id              Int     @id @default(autoincrement())
  companyId       Int     @map("company_id")
  informationYear String  @map("information_year")
  creditRating    String  @map("credit_rating")
  createdAt       Int     @map("created_at")
  updatedAt       Int     @map("updated_at")
  reportId        Int     @map("report_id")
  company         Company @relation(fields: [companyId], references: [id])
  report          Report  @relation(fields: [reportId], references: [id])
  deletedAt       Int?    @map("deleted_at")

  @@map("audit_report")
}

// Info: (20250306 - Tzuhan) Admin 表示 User 在 Company 內的管理身份
model Admin {
  id        Int     @id @default(autoincrement()) // Info: (20250306 - Tzuhan) Admin 表的唯一 ID
  userId    Int     @map("user_id")              // Info: (20250306 - Tzuhan) 這個 Admin 對應的 User ID
  companyId Int     @map("company_id")           // Info: (20250306 - Tzuhan) 這個 Admin 所屬的公司 ID
  roleId    Int     @map("role_id")              // Info: (20250306 - Tzuhan) Admin 擔任的角色 (對應 Role 表)
  email     String                                // Info: (20250306 - Tzuhan) Admin 的 Email (可用於通知)
  tag       String  @default("all")              // Info: (20250306 - Tzuhan) Admin 的標籤 (可能用於分類)
  order     Int     @default(1)                  // Info: (20250306 - Tzuhan) 排序順序
  status    Boolean                              // Info: (20250306 - Tzuhan) 是否啟用這個 Admin 帳號
  startDate Int     @map("start_date")           // Info: (20250306 - Tzuhan) Admin 的開始時間
  endDate   Int?    @map("end_date")             // Info: (20250306 - Tzuhan) Admin 的結束時間 (如果有)
  createdAt Int     @map("created_at")           // Info: (20250306 - Tzuhan) 創建時間
  updatedAt Int     @map("updated_at")           // Info: (20250306 - Tzuhan) 更新時間
  deletedAt Int?    @map("deleted_at")           // Info: (20250306 - Tzuhan) 刪除時間 (軟刪除)

  company   Company @relation(fields: [companyId], references: [id]) // Info: (20250306 - Tzuhan) 關聯到公司
  role      Role    @relation(fields: [roleId], references: [id])    // Info: (20250306 - Tzuhan) 關聯到 Role
  user      User    @relation(fields: [userId], references: [id])    // Info: (20250306 - Tzuhan) 關聯到 User (管理者)

  @@map("admin")
}

model Authentication {
  id           Int    @id @default(autoincrement())
  userId       Int    @map("user_id")
  credentialId String @unique @map("credential_id")
  method       String
  provider     String
  authData     Json   @map("auth_data")
  createdAt    Int    @map("created_at")
  updatedAt    Int    @map("updated_at")
  deletedAt    Int?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("authentication")
}

model AccountingSetting {
  id                 Int     @id @default(autoincrement())
  companyId          Int     @map("company_id")
  salesTaxTaxable    Boolean @map("sales_tax_taxable")
  salesTaxRate       Float   @map("sales_tax_rate")
  purchaseTaxTaxable Boolean @map("purchase_tax_taxable")
  purchaseTaxRate    Float   @map("purchase_tax_rate")
  returnPeriodicity  String  @map("return_periodicity")
  currency           String
  createdAt          Int     @default(0) @map("created_at")
  updatedAt          Int     @default(0) @map("updated_at")
  deletedAt          Int?    @map("deleted_at")

  company Company @relation(fields: [companyId], references: [id])

  shortcuts Shortcut[]

  @@map("accounting_setting")
}

model AssociateLineItem {
  id                 Int     @id @default(autoincrement())
  associateVoucherId Int     @map("associate_voucher_id")
  originalLineItemId Int     @map("original_line_item_id")
  resultLineItemId   Int     @map("result_line_item_id")
  debit              Boolean
  amount             Int
  createdAt          Int     @map("created_at")
  updatedAt          Int     @map("updated_at")
  deletedAt          Int?    @map("deleted_at")

  associateVoucher AssociateVoucher @relation(fields: [associateVoucherId], references: [id])
  originalLineItem LineItem         @relation("original_line_item", fields: [originalLineItemId], references: [id])
  resultLineItem   LineItem         @relation("result_line_item", fields: [resultLineItemId], references: [id])

  @@map("associate_line_item")
}

model AssociateVoucher {
  id                Int  @id @default(autoincrement())
  eventId           Int  @map("event_id")
  originalVoucherId Int  @map("original_voucher_id")
  resultVoucherId   Int  @map("result_voucher_id")
  createdAt         Int  @map("created_at")
  updatedAt         Int  @map("updated_at")
  deletedAt         Int? @map("deleted_at")

  associateLineItems AssociateLineItem[]

  event           Event   @relation(fields: [eventId], references: [id])
  originalVoucher Voucher @relation("original_voucher", fields: [originalVoucherId], references: [id])
  resultVoucher   Voucher @relation("result_voucher", fields: [resultVoucherId], references: [id])

  @@map("associate_voucher")
}

model Counterparty {
  id        Int    @id @default(autoincrement())
  companyId Int    @map("company_id")
  name      String
  taxId     String @map("tax_id")
  type      String
  note      String
  createdAt Int    @map("created_at")
  updatedAt Int    @map("updated_at")
  deletedAt Int?   @map("deleted_at")

  voucher Voucher[]

  company Company @relation(fields: [companyId], references: [id])

  @@map("counterparty")
}

model Country {
  id           Int    @id @default(autoincrement())
  code         String @map("code")
  name         String
  localeKey    String @map("locale_key")
  phoneCode    String @map("phone_code")
  currencyCode String @map("currency_code")
  currencyName String @map("currency_name")
  phoneExample String @map("phone_example")
  createdAt    Int    @map("created_at")
  updatedAt    Int    @map("updated_at")
  deletedAt    Int?   @map("deleted_at")

  UserSetting UserSetting[]

  @@map("country")
}

model Company {
  id          Int     @id @default(autoincrement())
  teamId      Int?    @map("team_id") // Info: (20250224 - tzuhan) 讓 company 連結到 team
  name        String
  taxId       String  @map("tax_id")
  imageFileId Int     @unique @map("image_file_id")
  startDate   Int     @map("start_date")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")
  isPrivate   Boolean @default(true) @map("is_private")
  isTransferring Boolean @default(false) @map("is_transferring")

  team      Team? @relation(fields: [teamId], references: [id], onDelete: SetNull)
  imageFile File  @relation("company_image_file", fields: [imageFileId], references: [id])

  admins                     Admin[]
  accountingSettings         AccountingSetting[]
  assets                     Asset[]
  accounts                   Account[]
  auditReports               AuditReport[]
  counterpartys              Counterparty[]
  companySettings            CompanySetting[]
  contracts                  Contract[]
  companyKYCs                CompanyKYC[]
  certificates               Certificate[]
  departments                Department[]
  employees                  Employee[]
  invitations                Invitation[]
  incomeExpenses             IncomeExpense[]
  journals                   Journal[]
  orders                     Order[]
  ocrs                       Ocr[]
  projects                   Project[]
  reports                    Report[]
  subscriptions              Subscription[]
  userTodoCompanies          UserTodoCompany[]
  vouchers                   Voucher[]
  voucherSalaryRecordFolders VoucherSalaryRecordFolder[]
  transfers                  AccountBookTransfer[]

  @@map("company")
}

model CompanyKYC {
  id                            Int     @id @default(autoincrement())
  companyId                     Int     @map("company_id")
  address                       String
  representativeName            String  @map("representative_name")
  country                       String
  registrationNumber            String  @map("registration_number")
  registrationDate              String  @map("registration_date")
  contactPerson                 String  @map("contact_person")
  contactPhone                  String  @map("contact_phone")
  contactEmail                  String  @map("contact_email")
  website                       String
  registrationCertificateFileId Int     @unique @map("registration_certificate_file_id") // Info: (2024839 - Murky) File ID
  taxCertificateFileId          Int     @unique @map("tax_certificate_file_id")
  representativeIdType          String  @map("representative_id_type")
  representativeIdCardFileId    Int     @unique @map("representative_id_card_file_id")
  city                          String
  industry                      String
  legalName                     String  @map("legal_name")
  structure                     String
  zipCode                       String  @map("zip_code")
  status                        String
  reviewer                      String?
  note                          String?
  reviewAt                      Int?    @map("review_at")
  createdAt                     Int     @map("created_at")
  updatedAt                     Int     @map("updated_at")
  deletedAt                     Int?    @map("deleted_at")

  company                     Company @relation(fields: [companyId], references: [id])
  registrationCertificateFile File    @relation("registration_certificate_file", fields: [registrationCertificateFileId], references: [id])
  taxCertificateFile          File    @relation("tax_certificate_file", fields: [taxCertificateFileId], references: [id])
  representativeIdCardFile    File    @relation("representative_id_card_file", fields: [representativeIdCardFileId], references: [id])

  @@map("company_kyc")
}

model CompanySetting {
  id                 Int    @id @default(autoincrement())
  companyId          Int    @unique @map("company_id")
  taxSerialNumber    String @map("tax_serial_number")
  representativeName String @map("representative_name")
  country            String
  phone              String
  address            String
  countryCode        String @default("tw") @map("country_code")
  createdAt          Int    @map("created_at")
  updatedAt          Int    @map("updated_at")
  deletedAt          Int?   @map("deleted_at")

  company Company @relation(fields: [companyId], references: [id])

  @@map("company_setting")
}

model Contract {
  id                Int       @id @default(autoincrement())
  fileUrl           String    @map("file_url")
  projectId         Int?      @map("project_id")
  companyId         Int       @map("company_id")
  name              String
  signatory         String
  signatoryDate     Int       @map("signatory_date")
  status            String
  paymentId         Int       @unique @map("payment_id")
  hasContractDate   Boolean   @map("has_contract_date")
  contractStartDate Int?      @map("contract_start_date")
  contractEndDate   Int?      @map("contract_end_date")
  hasDeadlineDate   Boolean   @map("has_deadline_date")
  deadlineDate      Int?      @map("deadline_date")
  hasWarrantyDate   Boolean   @map("has_warranty_date")
  warrantyStartDate Int?      @map("warranty_start_date")
  warrantyEndDate   Int?      @map("warranty_end_date")
  serviceType       String    @map("service_type")
  estimatedCost     Int?      @map("estimated_cost")
  createdAt         Int       @map("created_at")
  updatedAt         Int       @map("updated_at")
  deletedAt         Int?      @map("deleted_at")
  journal           Journal[]

  company Company  @relation(fields: [companyId], references: [id])
  project Project? @relation(fields: [projectId], references: [id])
  payment Payment  @relation(fields: [paymentId], references: [id])

  @@map("contract")
}

model Certificate {
  id         Int    @id @default(autoincrement())
  aiResultId String @default("0") @map("ai_result_id")
  companyId  Int    @map("company_id")
  fileId     Int    @unique @map("file_id")
  uploaderId Int    @map("uploader_id")
  createdAt  Int    @map("created_at")
  updatedAt  Int    @map("updated_at")
  deletedAt  Int?   @map("deleted_at")

  invoices            Invoice[]
  voucherCertificates VoucherCertificate[]
  UserCertificate     UserCertificate[]

  company  Company @relation(fields: [companyId], references: [id])
  file     File    @relation(fields: [fileId], references: [id])
  uploader User    @relation(fields: [uploaderId], references: [id])

  @@map("certificate")
}

model Department {
  id        Int        @id @default(autoincrement())
  companyId Int        @map("company_id")
  name      String
  createdAt Int        @map("created_at")
  updatedAt Int        @map("updated_at")
  deletedAt Int?       @map("deleted_at")
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]

  @@map("department")
}

model Employee {
  id               Int               @id @default(autoincrement())
  name             String
  imageId          String?           @map("image_id")
  departmentId     Int               @map("department_id")
  companyId        Int               @map("company_id")
  salary           Int
  insurancePayment Int               @map("insurance_payment")
  bonus            Int
  salaryPayMode    String            @map("salary_pay_mode")
  payFrequency     String            @map("pay_frequency")
  startDate        Int               @map("start_date")
  endDate          Int?              @map("end_date")
  createdAt        Int               @map("created_at")
  updatedAt        Int               @map("updated_at")
  deletedAt        Int?              @map("deleted_at")
  company          Company           @relation(fields: [companyId], references: [id])
  department       Department        @relation(fields: [departmentId], references: [id])
  employeeProjects EmployeeProject[]
  salaryRecords    SalaryRecord[]

  @@map("employee")
}

model EmployeeProject {
  id         Int        @id @default(autoincrement())
  employeeId Int        @map("employee_id")
  projectId  Int        @map("project_id")
  startDate  Int        @map("start_date")
  endDate    Int?       @map("end_date")
  createdAt  Int        @map("created_at")
  updatedAt  Int        @map("updated_at")
  deletedAt  Int?       @map("deleted_at")
  employee   Employee   @relation(fields: [employeeId], references: [id])
  project    Project    @relation(fields: [projectId], references: [id])
  workRates  WorkRate[]

  @@map("employee_project")
}

model Event {
  id           Int    @id @default(autoincrement())
  eventType    String @map("event_type")
  frequency    String @map("frequency")
  startDate    Int    @map("start_date")
  endDate      Int    @map("end_date")
  daysOfWeek   Int[]
  monthsOfYear Int[]
  createdAt    Int    @map("created_at")
  updatedAt    Int    @map("updated_at")
  deletedAt    Int?   @map("deleted_at")

  associateVouchers AssociateVoucher[]

  @@map("event")
}

model File {
  id                    Int     @id @default(autoincrement())
  name                  String // Info: (20240830 - Murky) Name example: "100000.jpg"
  size                  Float // Info: (20240830 - Murky) File Size in bytes
  mimeType              String  @map("mime_type") // Info: (20240830 - Murky) File Mime Type ex: image/jpeg
  type                  String //Info: (20240830 - Murky) FileFolder Type ex: invoice, tmp
  url                   String // Info: (20240830 - Murky) File URL, it can be local folder or google bucket
  isEncrypted           Boolean @map("is_encrypted") // Info: (20240830 - Murky) File is Encrypted by encryptSymmetricKey
  encryptedSymmetricKey String  @map("encrypted_symmetric_key") // Info: (20240830 - Murky) File Encrypt Symmetric Key
  iv                    Bytes   @default("") // Info: (20240830 - Murky) File Encrypt IV
  createdAt             Int     @map("created_at")
  updatedAt             Int     @map("updated_at")
  deletedAt             Int?    @map("deleted_at")

  certificate                 Certificate?
  news                        News[]
  companyImageFile            Company?     @relation("company_image_file")
  kycPersonalIdFile           KYCRole?     @relation("kyc_personal_id_file")
  kycCertificationFile        KYCRole?     @relation("kyc_certification_file")
  ocrImageFile                Ocr?         @relation("ocr_image_file")
  projectImageFile            Project?     @relation("project_image_file")
  registrationCertificateFile CompanyKYC?  @relation("registration_certificate_file")
  representativeIdCardFile    CompanyKYC?  @relation("representative_id_card_file")
  taxCertificateFile          CompanyKYC?  @relation("tax_certificate_file")
  userImageFile               User?        @relation("user_image_file")
  teamFile                    Team?        @relation("team_image_file")

  @@map("file")
}

model Invoice {
  id               Int     @id @default(autoincrement())
  certificateId    Int     @map("certificate_id")
  name             String  @default("Invoice 001")
  counterPartyInfo String? @map("counter_party_info")
  inputOrOutput    String  @map("input_or_output")
  date             Int
  no               String
  currencyAlias    String  @map("currency_alias")
  priceBeforeTax   Int     @map("price_before_tax")
  taxType          String  @map("tax_type")
  taxRatio         Int     @map("tax_ratio")
  taxPrice         Int     @map("tax_price")
  totalPrice       Int     @map("total_price")
  type             String
  deductible       Boolean
  createdAt        Int     @map("created_at")
  updatedAt        Int     @map("updated_at")
  deletedAt        Int?    @map("deleted_at")

  invoiceVoucherJournals InvoiceVoucherJournal[]

  certificate Certificate @relation(fields: [certificateId], references: [id])

  @@map("invoice")
}

model InvoiceVoucherJournal {
  id               Int    @id @default(autoincrement())
  invoiceId        Int?   @map("invoice_id")
  voucherId        Int?   @map("voucher_id")
  journalId        Int    @map("journal_id")
  description      String
  paymentId        Int?   @map("payment_id")
  paymentReason    String @map("payment_reason")
  vendorOrSupplier String @map("vendor_or_supplier")
  createdAt        Int    @map("created_at")
  updatedAt        Int    @map("updated_at")
  deletedAt        Int?   @map("deleted_at")

  invoice Invoice? @relation(fields: [invoiceId], references: [id])
  voucher Voucher? @relation(fields: [voucherId], references: [id])
  journal Journal  @relation(fields: [journalId], references: [id])

  @@map("invoice_voucher_journal")
}

model Invitation {
  id            Int     @id @default(autoincrement())
  companyId     Int     @map("company_id")
  roleId        Int     @map("role_id")
  createdUserId Int     @map("created_user_id")
  code          String  @unique
  email         String
  phone         String?
  hasUsed       Boolean @map("has_used")
  expiredAt     Int     @map("expired_at")
  createdAt     Int     @map("created_at")
  updatedAt     Int     @map("updated_at")
  deletedAt     Int?    @map("deleted_at")
  company       Company @relation(fields: [companyId], references: [id])
  createdUser   User    @relation(fields: [createdUserId], references: [id])
  role          Role    @relation(fields: [roleId], references: [id])

  @@map("invitation")
}

model IncomeExpense {
  id        Int      @id @default(autoincrement())
  income    Int
  expense   Int
  companyId Int      @map("company_id")
  projectId Int?     @map("project_id")
  createdAt Int      @map("created_at")
  updatedAt Int      @map("updated_at")
  deletedAt Int?     @map("deleted_at")
  company   Company  @relation(fields: [companyId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@map("income_expense")
}

model Journal {
  id            Int     @id @default(autoincrement())
  tokenContract String? @map("token_contract")
  tokenId       String? @map("token_id")
  aichResultId  String? @unique @map("aich_result_id")
  projectId     Int?    @unique @map("project_id")
  contractId    Int?    @unique @map("contract_id")
  companyId     Int     @map("company_id")
  event         String  @map("event")
  createdAt     Int     @map("created_at")
  updatedAt     Int     @map("updated_at")
  deletedAt     Int?    @map("deleted_at")

  invoiceVoucherJournals InvoiceVoucherJournal[]

  company  Company   @relation(fields: [companyId], references: [id])
  contract Contract? @relation(fields: [contractId], references: [id])
  project  Project?  @relation(fields: [projectId], references: [id])

  @@map("journal")
}

model KYCRole {
  id                  Int     @id @default(autoincrement())
  userId              Int     @map("user_id")
  roleId              Int     @map("role_id")
  name                String
  birthDate           String  @map("birth_date")
  email               String
  phone               String
  qualification       Boolean
  startDateOfPractice Int     @map("start_date_of_practice")
  certificationNumber String  @map("certification_number")
  association         String  @map("association")
  membershipNumber    String  @map("membership_number")
  personalIdType      String  @map("personal_id_type")
  personalIdFileId    Int     @unique @map("personal_id_file_id")
  certificationFileId Int     @unique @map("certification_file_id")
  createdAt           Int     @map("created_at")
  updatedAt           Int     @map("updated_at")
  deletedAt           Int?    @map("deleted_at")

  user              User @relation(fields: [userId], references: [id])
  personalIdFile    File @relation("kyc_personal_id_file", fields: [personalIdFileId], references: [id])
  certificationFile File @relation("kyc_certification_file", fields: [certificationFileId], references: [id])
  role              Role @relation(fields: [roleId], references: [id])

  @@map("kyc_role")
}

model LineItem {
  id          Int     @id @default(autoincrement())
  amount      Int
  description String
  debit       Boolean
  accountId   Int     @map("account_id")
  voucherId   Int     @map("voucher_id")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")

  originalLineItem AssociateLineItem[] @relation("original_line_item")
  resultLineItem   AssociateLineItem[] @relation("result_line_item")

  account Account @relation(fields: [accountId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("line_item")
}

model Milestone {
  id        Int     @id @default(autoincrement())
  projectId Int     @map("project_id")
  startDate Int?    @map("start_date")
  endDate   Int?    @map("end_date")
  status    String
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  deletedAt Int?    @map("deleted_at")
  project   Project @relation(fields: [projectId], references: [id])

  @@map("milestone")
}

model News {
  id        Int    @id @default(autoincrement())
  imageId   Int    @map("image_id")
  type      String
  title     String
  content   String
  createdAt Int    @map("created_at")
  updatedAt Int    @map("updated_at")
  deletedAt Int?   @map("deleted_at")

  imageFile File @relation(fields: [imageId], references: [id])

  @@map("news")
}

model Ocr {
  id           Int     @id @default(autoincrement())
  aichResultId String  @unique @map("aich_result_id")
  companyId    Int     @map("company_id")
  imageFileId  Int     @unique @map("image_file_id")
  status       String
  type         String // Info (20240626 - Jacky) ex: "invoice", "contract"
  createdAt    Int     @map("created_at")
  updatedAt    Int     @map("updated_at")
  deletedAt    Int?    @map("deleted_at")
  company      Company @relation(fields: [companyId], references: [id])
  imageFile    File    @relation("ocr_image_file", fields: [imageFileId], references: [id])

  @@map("ocr")
}

model Order {
  id        Int    @id @default(autoincrement())
  companyId Int    @map("company_id")
  planId    Int    @map("plan_id")
  status    String
  createdAt Int    @map("created_at")
  updatedAt Int    @map("updated_at")
  deletedAt Int?   @map("deleted_at")

  paymentRecords PaymentRecord[]

  company Company @relation(fields: [companyId], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])

  @@map("order")
}

model Project {
  id               Int               @id @default(autoincrement())
  companyId        Int               @map("company_id")
  name             String
  completedPercent Int               @map("completed_percent")
  stage            String
  imageFileId      Int               @unique @map("image_file_id")
  createdAt        Int               @map("created_at")
  updatedAt        Int               @map("updated_at")
  deletedAt        Int?              @map("deleted_at")
  contracts        Contract[]
  journals         Journal[]
  milestones       Milestone[]
  report           Report[]
  sales            Sale[]
  value            Value?
  employeeProjects EmployeeProject[]
  income_expenses  IncomeExpense[]

  company   Company @relation(fields: [companyId], references: [id])
  imageFile File    @relation("project_image_file", fields: [imageFileId], references: [id])

  @@map("project")
}

model Payment {
  id                Int       @id @default(autoincrement())
  isRevenue         Boolean   @map("is_revenue")
  price             Int
  hasTax            Boolean   @map("has_tax")
  taxPercentage     Int       @map("tax_percentage")
  taxPrice          Int       @map("tax_price")
  hasFee            Boolean   @map("has_fee")
  fee               Int
  method            String    @map("method")
  period            String    @map("period")
  installmentPeriod Int       @map("installment_period")
  alreadyPaid       Int       @map("already_paid")
  status            String    @map("status")
  progress          Int
  createdAt         Int       @map("created_at")
  updatedAt         Int       @map("updated_at")
  deletedAt         Int?      @map("deleted_at")
  contract          Contract?

  @@map("payment")
}

model PaymentRecord {
  id                Int    @id @default(autoincrement())
  orderId           Int    @map("order_id")
  transactionId     String @map("transaction_id")
  action            String
  amount            Float
  fee               Float
  method            String @map("method")
  cardIssuerCountry String @map("card_issuer_country")
  status            String
  paymentCreatedAt  String @map("payment_created_at")
  refundAmount      Float  @map("refund_amount")
  authCode          String @map("auth_code")
  createdAt         Int    @map("created_at")
  updatedAt         Int    @map("updated_at")
  deletedAt         Int?   @map("deleted_at")

  order Order @relation(fields: [orderId], references: [id])

  @@map("payment_record")
}

model Plan {
  id           Int    @id @default(autoincrement())
  name         String @unique
  description  String
  billingCycle String @map("billing_cycle")
  price        Float
  createdAt    Int    @map("created_at")
  updatedAt    Int    @map("updated_at")
  deletedAt    Int?   @map("deleted_at")

  orders        Order[]
  subscriptions Subscription[]

  @@map("plan")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  type        String       @default("system") // Info: (20241104 - Jacky) system, company
  permissions String[]
  createdAt   Int          @map("created_at")
  updatedAt   Int          @map("updated_at")
  deletedAt   Int?         @map("deleted_at")
  admins      Admin[]
  invitations Invitation[]
  userRoles   UserRole[]
  KYCRole     KYCRole[]

  @@map("role")
}

model Report {
  id                     Int           @id @default(autoincrement())
  companyId              Int           @map("company_id")
  tokenContract          String?       @map("token_contract")
  tokenId                String?       @map("token_id")
  name                   String
  from                   Int
  to                     Int
  type                   String
  reportType             String        @map("report_type")
  status                 String
  remainingSeconds       Int?          @map("remaining_seconds")
  paused                 Boolean?
  projectId              Int?          @map("project_id")
  reportLink             String?       @map("report_link")
  downloadLink           String?       @map("download_link")
  blockChainExplorerLink String?       @map("block_chain_explorer_link")
  evidenceId             String?       @map("evidence_id")
  content                Json          @map("content")
  createdAt              Int           @map("created_at")
  updatedAt              Int           @map("updated_at")
  deletedAt              Int?          @map("deleted_at")
  auditReports           AuditReport[]
  company                Company       @relation(fields: [companyId], references: [id])
  project                Project?      @relation(fields: [projectId], references: [id])

  @@map("report")
}

model Subscription {
  id          Int     @id @default(autoincrement())
  planId      Int     @map("plan_id")
  companyId   Int     @map("company_id")
  autoRenewal Boolean @map("auto_renewal")
  status      Boolean
  startDate   Int     @map("start_date")
  expiredDate Int     @map("expired_date")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")

  company Company @relation(fields: [companyId], references: [id])
  plan    Plan    @relation(fields: [planId], references: [id])

  @@map("subscription")
}

model Sale {
  id         Int     @id @default(autoincrement())
  projectId  Int     @map("project_id")
  date       String
  totalSales Int     @map("total_sales")
  comparison Int
  createdAt  Int     @map("created_at")
  updatedAt  Int     @map("updated_at")
  deletedAt  Int?    @map("deleted_at")
  project    Project @relation(fields: [projectId], references: [id])

  @@map("sale")
}

model SalaryRecord {
  id                   Int                   @id @default(autoincrement())
  employeeId           Int                   @map("employee_id")
  startDate            Int                   @map("start_date")
  endDate              Int                   @map("end_date")
  salary               Int
  insurancePayment     Int                   @map("insurance_payment")
  bonus                Int
  description          String
  workingHour          Int                   @map("working_hour")
  confirmed            Boolean
  createdAt            Int                   @map("created_at")
  updatedAt            Int                   @map("updated_at")
  deletedAt            Int?                  @map("deleted_at")
  employee             Employee              @relation(fields: [employeeId], references: [id])
  voucherSalaryRecords VoucherSalaryRecord[]

  @@map("salary_record")
}

model SalaryRecordProjectHour {
  id             Int  @id @default(autoincrement())
  projectId      Int  @map("project_id")
  salaryRecordId Int  @map("salary_record_id")
  hour           Int
  createdAt      Int  @map("created_at")
  updatedAt      Int  @map("updated_at")
  deletedAt      Int? @map("deleted_at")

  @@map("salary_record_project_hour")
}

model Shortcut {
  id                  Int      @id @default(autoincrement())
  accountingSettingId Int      @map("accounting_setting_id")
  actionName          String   @map("action_name")
  description         String
  fieldList           Json     @map("field_list")
  keyList             String[] @map("key_list")
  createdAt           Int      @map("created_at")
  updatedAt           Int      @map("updated_at")
  deletedAt           Int?     @map("deleted_at")

  accountingSetting AccountingSetting @relation(fields: [accountingSettingId], references: [id])

  @@map("shortcut")
}

model Todo {
  id        Int     @id @default(autoincrement())
  name      String
  deadline  Int
  note      String?
  status    Boolean
  startDate Int     @default(0) @map("start_date")
  endDate   Int     @default(0) @map("end_date")
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  deletedAt Int?    @map("deleted_at")

  userTodoCompanies UserTodoCompany[]

  @@map("todo")
}

model User {
  id          Int     @id @default(autoincrement())
  name        String
  email       String?
  imageFileId Int     @unique @map("image_File_id")
  createdAt   Int     @map("created_at")
  updatedAt   Int     @map("updated_at")
  deletedAt   Int?    @map("deleted_at")

  admins            Admin[]
  authentications   Authentication[]
  certificates      Certificate[]
  invitations       Invitation[]
  kycRoles          KYCRole[]
  userAgreements    UserAgreement[]
  userActionLogs    UserActionLog[]
  userCertificates  UserCertificate[]
  userPaymentInfo   UserPaymentInfo[]
  userRoles         UserRole[]
  userTodoCompanies UserTodoCompany[]
  userVouchers      UserVoucher[]
  Voucher           Voucher[]

  imageFile   File          @relation("user_image_file", fields: [imageFileId], references: [id])
  Asset       Asset[]
  UserSetting UserSetting[]
  ownedTeams  Team[] // Info: (20250221 - tzuhan) 反向關聯，表示這個 User 可能是多個 Team 的 owner
  memberships TeamMember[] // Info: (20250221 - tzuhan) 這個 User 可能是多個 Team 的成員

  @@map("user")
  AccountBookTransfer AccountBookTransfer[]
}

model UserAgreement {
  id            Int    @id @default(autoincrement())
  userId        Int    @map("user_id")
  agreementHash String @map("agreement_hash")
  createdAt     Int    @map("created_at")
  updatedAt     Int    @map("updated_at")
  deletedAt     Int?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, agreementHash]) // Info: (20240816 - Jacky) Ensures a user can't agree to the same term more than once
  @@map("user_agreement")
}

model UserActionLog {
  id                Int    @id @default(autoincrement())
  sessionId         String @map("session_id")
  userId            Int    @map("user_id")
  actionType        String @map("action_type")
  actionDescription String @map("action_description")
  actionTime        Int    @map("action_time")
  ipAddress         String @map("ip_address")
  userAgent         String @map("user_agent")
  apiEndpoint       String @map("api_endpoint")
  httpMethod        String @map("http_method")
  requestPayload    Json   @map("request_payload")
  httpStatusCode    Int    @map("http_status_code")
  statusMessage     String @map("status_message")
  createdAt         Int    @default(0) @map("created_at")
  updatedAt         Int    @default(0) @map("updated_at")
  deletedAt         Int?   @default(0) @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_action_log")
}

model UserPaymentInfo {
  id            Int    @id @default(autoincrement())
  userId        Int    @map("user_id")
  token         String
  transactionId String @map("transaction_id")
  createdAt     Int    @map("created_at")
  updatedAt     Int    @map("updated_at")
  deletedAt     Int?   @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("user_payment_info")
}

model UserSetting {
  id                                Int     @id @default(autoincrement())
  userId                            Int     @map("user_id")
  firstName                         String? @map("first_name")
  lastName                          String? @map("last_name")
  countryId                         Int     @map("country_id")
  language                          String
  phone                             String?
  systemNotification                Boolean @map("system_notification")
  updateAndSubscriptionNotification Boolean @map("update_and_subscription_notification")
  emailNotification                 Boolean @map("email_notification")
  createdAt                         Int     @map("created_at")
  updatedAt                         Int     @map("updated_at")
  deletedAt                         Int?    @map("deleted_at")

  user    User    @relation(fields: [userId], references: [id])
  country Country @relation(fields: [countryId], references: [id])

  @@map("user_setting")
}

model UserRole {
  id          Int  @id @default(autoincrement())
  userId      Int  @map("user_id")
  roleId      Int  @map("role_id")
  lastLoginAt Int  @default(0) @map("last_login_at")
  createdAt   Int  @map("created_at")
  updatedAt   Int  @map("updated_at")
  deletedAt   Int? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  @@map("user_role")
}

model UserCertificate {
  id            Int     @id @default(autoincrement())
  userId        Int     @map("user_id")
  certificateId Int     @map("certificate_id")
  isRead        Boolean @map("is_read")
  createdAt     Int     @map("created_at")
  updatedAt     Int     @map("updated_at")
  deletedAt     Int?    @map("deleted_at")

  user        User        @relation(fields: [userId], references: [id])
  certificate Certificate @relation(fields: [certificateId], references: [id])

  @@map("user_certificate")
}

model UserVoucher {
  id        Int     @id @default(autoincrement())
  userId    Int     @map("user_id")
  voucherId Int     @map("voucher_id")
  isRead    Boolean @map("is_read")
  createdAt Int     @map("created_at")
  updatedAt Int     @map("updated_at")
  deletedAt Int?    @map("deleted_at")

  user    User    @relation(fields: [userId], references: [id])
  voucher Voucher @relation(fields: [voucherId], references: [id])

  @@map("user_voucher")
}

model UserTodoCompany {
  id        Int  @id @default(autoincrement())
  userId    Int  @map("user_id")
  companyId Int  @map("company_id")
  todoId    Int  @map("todo_id")
  createdAt Int  @map("created_at")
  updatedAt Int  @map("updated_at")
  deletedAt Int? @map("deleted_at")

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
  todo    Todo    @relation(fields: [todoId], references: [id])

  @@map("user_todo_company")
}

model Voucher {
  id             Int     @id @default(autoincrement())
  issuerId       Int     @map("issuer_id")
  counterPartyId Int     @map("counter_party_id")
  companyId      Int     @map("company_id")
  aiResultId     String  @default("0") @map("ai_result_id")
  status         String  @default("journal:JOURNAL.UPLOADED")
  editable       Boolean @default(true)
  no             String
  date           Int
  type           String  @default("payment")
  note           String?
  createdAt      Int     @map("created_at")
  updatedAt      Int     @map("updated_at")
  deletedAt      Int?    @map("deleted_at")

  assetVouchers          AssetVoucher[]
  lineItems              LineItem[]
  UserVoucher            UserVoucher[]
  voucherSalaryRecords   VoucherSalaryRecord[]
  voucherCertificates    VoucherCertificate[]
  invoiceVoucherJournals InvoiceVoucherJournal[]

  originalVouchers AssociateVoucher[] @relation("original_voucher")
  resultVouchers   AssociateVoucher[] @relation("result_voucher")

  company      Company      @relation(fields: [companyId], references: [id])
  issuer       User         @relation(fields: [issuerId], references: [id])
  counterparty Counterparty @relation(fields: [counterPartyId], references: [id])

  @@map("voucher")
}

model VoucherCertificate {
  id            Int  @id @default(autoincrement())
  voucherId     Int  @map("voucher_id")
  certificateId Int  @map("certificate_id")
  createdAt     Int  @map("created_at")
  updatedAt     Int  @map("updated_at")
  deletedAt     Int? @map("deleted_at")

  voucher     Voucher     @relation(fields: [voucherId], references: [id])
  certificate Certificate @relation(fields: [certificateId], references: [id])

  @@map("voucher_certificate")
}

model VoucherSalaryRecord {
  id                          Int                       @id @default(autoincrement())
  voucherId                   Int                       @map("voucher_id")
  salaryRecordId              Int                       @map("salary_record_id")
  voucherSalaryRecordFolderId Int                       @map("voucher_salary_record_folder_id")
  createdAt                   Int                       @map("created_at")
  updatedAt                   Int                       @map("updated_at")
  deletedAt                   Int?                      @map("deleted_at")
  voucher                     Voucher                   @relation(fields: [voucherId], references: [id])
  salaryRecord                SalaryRecord              @relation(fields: [salaryRecordId], references: [id])
  voucherSalaryRecordFolder   VoucherSalaryRecordFolder @relation(fields: [voucherSalaryRecordFolderId], references: [id])

  @@map("voucher_salary_record")
}

model VoucherSalaryRecordFolder {
  id                   Int                   @id @default(autoincrement())
  companyId            Int                   @map("company_id")
  name                 String
  createdAt            Int                   @map("created_at")
  updatedAt            Int                   @map("updated_at")
  deletedAt            Int?                  @map("deleted_at")
  company              Company               @relation(fields: [companyId], references: [id])
  voucherSalaryRecords VoucherSalaryRecord[]

  @@map("voucher_salary_record_folder")
}

model Value {
  id                      Int     @id @default(autoincrement())
  projectId               Int     @unique @map("project_id")
  totalRevenue            Int     @map("total_revenue")
  totalRevenueGrowthIn30d Int     @map("total_revenue_growth_in_30d")
  totalExpense            Int     @map("total_expense")
  netProfit               Int     @map("net_profit")
  netProfitGrowthIn30d    Int     @map("net_profit_growth_in_30d")
  netProfitGrowthInYear   Int     @map("net_profit_growth_in_year")
  createdAt               Int     @map("created_at")
  updatedAt               Int     @map("updated_at")
  deletedAt               Int?    @map("deleted_at")
  project                 Project @relation(fields: [projectId], references: [id])

  @@map("value")
}

model WorkRate {
  id                Int             @id @default(autoincrement())
  employeeProjectId Int             @map("employee_project_id")
  involvementRate   Int?            @map("involvement_rate")
  expectedHours     Int             @map("expected_hours")
  actualHours       Int             @map("actual_hours")
  createdAt         Int             @map("created_at")
  updatedAt         Int             @map("updated_at")
  deletedAt         Int?            @map("deleted_at")
  employeeProject   EmployeeProject @relation(fields: [employeeProjectId], references: [id])

  @@map("work_rate")
}

model TeamPlan {
  id               Int                @id @default(autoincrement())
  type             TeamPlanType       @unique
  planName         String             @map("plan_name")
  price            Int
  extraMemberPrice Int?               @map("extra_member_price")
  features         TeamPlanFeature[]
  createdAt        Int                @map("created_at")
  updatedAt        Int                @map("updated_at")
  TeamSubscription TeamSubscription[]
  TeamInvoice      TeamInvoice[]

  @@map("team_plan")
}

model TeamPlanFeature {
  id           Int      @id @default(autoincrement())
  planId       Int      @map("plan_id")
  plan         TeamPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  featureKey   String   @map("feature_key")
  featureValue String   @map("feature_value")
  createdAt    Int      @map("created_at")
  updatedAt    Int      @map("updated_at")

  @@map("team_plan_feature")
}

enum TeamPlanType {
  BEGINNER
  PROFESSIONAL
  ENTERPRISE
}

model Team {
  id          Int    @id @default(autoincrement())
  ownerId     Int    @map("owner_id")
  owner       User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name        String
  imageFileId Int?   @unique @map("image_file_id")
  about       String @default("")
  profile     String @default("")
  bankInfo    Json   @default("{\"code\": \"\", \"number\": \"\"}") @map("bank_info")
  createdAt   Int    @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("created_at")
  updatedAt   Int    @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("updated_at")

  members        TeamMember[]
  accountBook    Company[]
  subscription   TeamSubscription?
  imageFile      File?               @relation("team_image_file", fields: [imageFileId], references: [id])
  pendingMembers PendingTeamMember[]
  fromTeamId     AccountBookTransfer[] @relation("fromTeamId")
  toTeamId       AccountBookTransfer[] @relation("toTeamId")

  @@map("team")
}

model PendingTeamMember {
  id        Int    @id @default(autoincrement())
  teamId    Int    @map("team_id")
  email     String @unique @map("email")
  createdAt Int    @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("created_at")

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@map("pending_team_member")
}

model TeamMember {
  id       Int      @id @default(autoincrement())
  teamId   Int      @map("team_id")
  team     Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId   Int      @map("user_id")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role     TeamRole
  joinedAt Int      @map("joined_at")
  leftAt   Int?       @map("left_at")  // Info: (20250307 - Tzuhan) 記錄離開時間（null 代表仍在 team）
  status   LeaveStatus @default(IN_TEAM) @map("status") // Info: (20250307 - Tzuhan) 記錄用戶是否仍在 team

  @@unique([teamId, userId])
  @@map("team_member")
}

enum LeaveStatus {
  IN_TEAM    // Info: (20250307 - Tzuhan) 仍在 team
  NOT_IN_TEAM // Info: (20250307 - Tzuhan) 已離開 team
}

enum TeamRole {
  OWNER // Info: (20250221 - tzuhan) 擁有者 (最高權限)
  ADMIN // Info: (20250221 - tzuhan) 管理員 (可以管理成員、訂閱)
  EDITOR // Info: (20250221 - tzuhan) 可編輯內容
  VIEWER // Info: (20250221 - tzuhan) 只能查看
}

model TeamSubscription {
  id     Int  @id @default(autoincrement())
  teamId Int  @unique @map("team_id")
  team   Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  planId Int      @map("plan_id")
  plan   TeamPlan @relation(fields: [planId], references: [id], onDelete: Cascade)

  autoRenewal   Boolean           @default(false) @map("auto_renewal")
  startDate     Int               @map("start_date")
  expiredDate   Int               @map("expired_date")
  paymentStatus TeamPaymentStatus @map("payment_status")

  lastTransactionId Int?                    @map("last_transaction_id")
  lastTransaction   TeamPaymentTransaction?

  invoices TeamInvoice[] // Info: (20250221 - tzuhan) 關聯發票

  createdAt Int @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("created_at")
  updatedAt Int @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("updated_at")

  @@map("team_subscription")
}

enum TeamPaymentStatus {
  PAID
  UNPAID
  FREE
}

model TeamPaymentTransaction {
  id             Int              @id @default(autoincrement())
  subscriptionId Int              @unique @map("subscription_id") // Info: (20250221 - tzuhan)  設定 `@unique`，確保 1-to-1 關聯
  subscription   TeamSubscription @relation(fields: [subscriptionId], references: [id])

  transactionId String            @map("transaction_id")
  amount        Int
  paymentMethod String            @map("payment_method")
  status        TransactionStatus
  createdAt     Int               @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("created_at")

  @@map("team_payment_transaction")
}

enum TransactionStatus {
  SUCCESS
  FAILED
  PENDING
}

model TeamInvoice {
  id             Int              @id @default(autoincrement())
  subscriptionId Int              @map("subscription_id")
  subscription   TeamSubscription @relation(fields: [subscriptionId], references: [id])

  issuedTimestamp Int @map("issued_timestamp")
  dueTimestamp    Int @map("due_timestamp")

  planId Int      @map("plan_id")
  plan   TeamPlan @relation(fields: [planId], references: [id])

  planStartDate Int    @map("plan_start_date")
  planEndDate   Int    @map("plan_end_date")
  planQuantity  Int    @map("plan_quantity")
  planUnitPrice Int    @map("plan_unit_price")
  planAmount    Int    @map("plan_amount")
  subtotal      Int
  tax           Int
  total         Int
  amountDue     Int    @map("amount_due")
  payerName     String @map("payer_name")
  payerAddress  String @map("payer_address")
  payerPhone    String @map("payer_phone")
  payerTaxId    String @map("payer_tax_id")
  payeeName     String @map("payee_name")
  payeeAddress  String @map("payee_address")
  payeePhone    String @map("payee_phone")
  payeeTaxId    String @map("payee_tax_id")
  createdAt     Int    @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int")) @map("created_at")

  @@map("team_invoice")
}

enum TransferStatus {
  PENDING    // Info: (20250307 - Tzuhan) 移轉進行中
  COMPLETED  // Info: (20250307 - Tzuhan) 移轉完成
  CANCELED   // Info: (20250307 - Tzuhan) 原團隊取消移轉
  DECLINED   // Info: (20250307 - Tzuhan) 目標團隊拒絕移轉
  FAILED
}

model AccountBookTransfer {
  id                Int     @id @default(autoincrement())
  companyId         Int     @map("company_id") // Info: (20250307 - Tzuhan) 被轉移的帳本 ID
  fromTeamId        Int     @map("from_team_id") // Info: (20250307 - Tzuhan) 轉出團隊 ID
  toTeamId          Int     @map("to_team_id") // Info: (20250307 - Tzuhan) 轉入團隊 ID
  initiatedByUserId Int     @map("initiated_by_user_id") // Info: (20250307 - Tzuhan) 執行轉移的使用者 ID
  status            TransferStatus @default(PENDING) @map("status") // Info: (20250307 - Tzuhan) 移轉狀態
  createdAt         Int     @map("created_at") @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int"))// Info: (20250307 - Tzuhan) 轉移請求建立時間
  pendingAt         Int?    @map("pending_at") // Info: (20250307 - Tzuhan) 進入 PENDING 狀態的時間
  completedAt       Int?    @map("completed_at") // Info: (20250307 - Tzuhan) 轉移成功時間
  canceledAt        Int?    @map("canceled_at") // Info: (20250307 - Tzuhan) 轉移取消時間
  updatedAt         Int     @map("updated_at") @default(dbgenerated("EXTRACT(EPOCH FROM NOW())::int"))// Info: (20250307 - Tzuhan) 最後更新時間
  note              Json?   @map("note") @default("{}")// Info: (20250307 - Tzuhan) 備註欄位（可存放轉移原因、備註等）

  accountBook      Company @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fromTeam         Team @relation("fromTeamId", fields: [fromTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Info: (20250310 - Tzuhan) 明確命名關聯
  toTeam           Team @relation("toTeamId", fields: [toTeamId], references: [id], onDelete: Cascade, onUpdate: Cascade) // Info: (20250310 - Tzuhan) 明確命名關聯
  initiatedByUser  User @relation(fields: [initiatedByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("accountBook_transfer")
  // @@unique([fromTeamId, toTeamId]) // Info: (20250314 - Tzuhan) remove companyId from unique constraint, because it's not necessary
}
