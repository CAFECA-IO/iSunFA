generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model account {
  id        Int        @id @default(autoincrement())
  type      String
  liquidity String
  account   String
  code      String
  name      String
  lineItem  lineItem[]
}

model asset {
  id                 Int     @id @default(autoincrement())
  name               String
  projectId          Int
  type               String
  description        String
  startedDate        String
  endDate            String
  purchasePrice      String
  purchaseAmount     String
  totalPrice         String
  residualValue      String
  estimateUsefulLife String
  depreciationMethod String
  project            project @relation(fields: [projectId], references: [id])
}

model auditReport {
  id                  Int     @id @default(autoincrement())
  companyId           Int     @map("company_id")
  informationYear     String
  detailedInformation String
  creditRating        String
  link                String
  dateOfUpload        Int
  company             company @relation(fields: [companyId], references: [id])
}

model card {
  id            Int            @id @default(autoincrement())
  companyId     Int            @map("company_id")
  type          String
  no            String
  expireYear    String
  expireMonth   String
  cvc           String
  name          String
  company       company        @relation(fields: [companyId], references: [id])
  subscriptions subscription[]
}

model cashflow {
  id        Int     @id @default(autoincrement())
  createdAt Int
  income    Int
  expense   Int
  projectId Int
  project   project @relation(fields: [projectId], references: [id])
}

model client {
  id        Int     @id @default(autoincrement())
  companyId Int     @map("company_id")
  favorite  Boolean
  company   company @relation(fields: [companyId], references: [id])
}

model company {
  id                 Int               @id @default(autoincrement())
  name               String
  code               String            @unique
  regional           String
  startDate          Int               @map("start_date")
  createdAt          Int               @map("created_at")
  updatedAt          Int               @map("updated_at")
  auditReports       auditReport[]
  cards              card[]
  clients            client[]
  companyKYCs        companyKYC[]
  contracts          contract[]
  departments        department[]
  employees          employee[]
  invitations        invitation[]
  journals           journal[]
  projects           project[]
  roles              role[]
  subscriptions      subscription[]
  usersCompanysRoles userCompanyRole[]
}

model companyKYC {
  id                        Int     @id @default(autoincrement())
  companyId                 Int
  address                   String
  representativeName        String
  country                   String
  registrationNumber        String
  registrationDate          String
  contactPerson             String
  contactPhone              String
  contactEmail              String
  website                   String
  registrationCertificateId String
  taxCertificateId          String
  representativeIdType      String
  representativeIdCardId    String
  city                      String
  industry                  String
  legalName                 String
  structure                 String
  zipCode                   String
  createdAt                 Int     @map("created_at")
  company                   company @relation(fields: [companyId], references: [id])
}

model contract {
  id                Int              @id @default(autoincrement())
  aichResultId      String           @unique @map("aich_result_id")
  ocrId             Int              @unique @map("ocr_id")
  contractContentId Int?             @unique @map("contract_content_id")
  projectId         Int?             @map("project_id")
  companyId         Int              @map("company_id")
  company           company          @relation(fields: [companyId], references: [id])
  contractContent   contractContent? @relation(fields: [contractContentId], references: [id])
  ocr               ocr              @relation(fields: [ocrId], references: [id])
  project           project?         @relation(fields: [projectId], references: [id])
  journal           journal?
}

model contractContent {
  id                Int       @id @default(autoincrement())
  name              String
  signatory         String
  signatoryDate     Int       @map("signatory_date")
  status            String
  paymentId         Int       @unique @map("payment_id")
  hasContractDate   Boolean   @map("has_contract_date")
  contractStartDate Int?      @map("contract_start_date")
  contractEndDate   Int?      @map("contract_end_date")
  hasDeadlineDate   Boolean   @map("has_deadline_date")
  deadlineDate      Int?      @map("deadline_date")
  hasWarrantyDate   Boolean   @map("has_warranty_date")
  warrantyStartDate Int?      @map("warranty_start_date")
  warrantyEndDate   Int?      @map("warranty_end_date")
  serviceType       String    @map("service_type")
  estimatedCost     Int?      @map("estimated_cost")
  contract          contract?
  payment           payment   @relation(fields: [paymentId], references: [id])
}

model department {
  id        Int        @id @default(autoincrement())
  companyId Int        @map("company_id")
  name      String
  company   company    @relation(fields: [companyId], references: [id])
  employees employee[]
}

model employee {
  id               Int               @id @default(autoincrement())
  name             String
  imageId          String?
  departmentId     Int               @map("department_id")
  companyId        Int               @map("company_id")
  salary           Int
  insurancePayment Int
  bonus            String
  salaryPayMode    String
  payFrequency     String
  startDate        Int
  endDate          Int
  company          company           @relation(fields: [companyId], references: [id])
  department       department        @relation(fields: [departmentId], references: [id])
  employeeProjects employeeProject[]
  salaries         salary[]
}

model employeeProject {
  id         Int      @id @default(autoincrement())
  employeeId Int
  projectId  Int
  employee   employee @relation(fields: [employeeId], references: [id])
  project    project  @relation(fields: [projectId], references: [id])

  @@map("employee_project")
}

model invoice {
  id               Int      @id @default(autoincrement())
  date             Int
  eventType        String   @map("event_type")
  paymentReason    String   @map("payment_reason")
  description      String
  vendorOrSupplier String   @map("vendor_or_supplier")
  paymentId        Int      @unique @map("payment_id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  projectId        Int?     @map("project_id")
  payment          payment  @relation(fields: [paymentId], references: [id])
  project          project? @relation(fields: [projectId], references: [id])
  journal          journal?
}

model invitation {
  id            Int     @id @default(autoincrement())
  code          String  @unique
  companyId     Int     @map("company_id")
  roleId        Int     @map("role_id")
  createdUserId Int     @map("created_user_id")
  hasUsed       Boolean
  expiredAt     Int
  company       company @relation(fields: [companyId], references: [id])
  createdUser   user    @relation(fields: [createdUserId], references: [id])
  role          role    @relation(fields: [roleId], references: [id])
}

model journal {
  id            Int       @id @default(autoincrement())
  tokenContract String?   @map("token_contract")
  tokenId       String?   @map("token_id")
  ocrId         Int?      @unique @map("ocr_id")
  aichResultId  String?   @unique @map("aich_result_id")
  invoiceId     Int?      @unique @map("invoice_id")
  voucherId     Int?      @unique @map("voucher_id")
  projectId     Int?      @unique @map("project_id")
  contractId    Int?      @unique @map("contract_id")
  companyId     Int?      @map("company_id")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  company       company?  @relation(fields: [companyId], references: [id])
  contract      contract? @relation(fields: [contractId], references: [id])
  invoice       invoice?  @relation(fields: [invoiceId], references: [id])
  ocr           ocr?      @relation(fields: [ocrId], references: [id])
  project       project?  @relation(fields: [projectId], references: [id])
  voucher       voucher?  @relation(fields: [voucherId], references: [id])
}

model lineItem {
  id          Int      @id @default(autoincrement())
  amount      Int
  description String
  debit       Boolean
  accountId   Int      @map("account_id")
  voucherId   Int?
  account     account  @relation(fields: [accountId], references: [id])
  voucher     voucher? @relation(fields: [voucherId], references: [id])

  @@map("line_item")
}

model milestone {
  id        Int     @id @default(autoincrement())
  projectId Int
  startDate Int     @map("start_date")
  endDate   Int     @map("end_date")
  status    String
  project   project @relation(fields: [projectId], references: [id])
}

model ocr {
  id        Int       @id @default(autoincrement())
  imageName String    @map("image_name")
  imageUrl  String    @map("image_url")
  imageSize Float     @map("image_size")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  contract  contract?
  journal   journal?
}

model project {
  id               Int               @id @default(autoincrement())
  companyId        Int               @map("company_id")
  name             String
  completedPercent Int               @map("completed_percent")
  stage            String
  totalExpense     Int?
  totalIncome      Int?
  imageId          String?
  assets           asset[]
  cashflow         cashflow[]
  contracts        contract[]
  employeeProjects employeeProject[]
  invoices         invoice[]
  journals         journal?
  milestones       milestone[]
  company          company           @relation(fields: [companyId], references: [id])
  sales            sale[]
  values           value[]
  workRates        workRate[]
}

model payment {
  id                 Int              @id @default(autoincrement())
  isRevenue          Boolean
  price              Int
  hasTax             Boolean
  taxPercentage      Int
  hasFee             Boolean
  fee                Int
  paymentMethod      String
  paymentPeriod      String
  installmentPeriod  Int
  paymentAlreadyDone Int
  paymentStatus      String
  progress           Int
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  contractContent    contractContent?
  invoice            invoice?
}

model role {
  id                 Int               @id @default(autoincrement())
  companyId          Int               @map("company_id")
  name               String
  permissions        String[]
  invitations        invitation[]
  company            company           @relation(fields: [companyId], references: [id])
  usersCompanysRoles userCompanyRole[]
}

model subscription {
  id         Int     @id @default(autoincrement())
  plan       String
  price      String
  autoRenew  Boolean
  status     String
  cardId     Int     @map("card_id")
  startDate  Int
  expireDate Int
  companyId  Int     @map("company_id")
  card       card    @relation(fields: [cardId], references: [id])
  company    company @relation(fields: [companyId], references: [id])
}

model sale {
  id         Int     @id @default(autoincrement())
  projectId  Int
  date       String
  totalSales Int
  comparison Int
  project    project @relation(fields: [projectId], references: [id])
}

model salary {
  id               Int      @id @default(autoincrement())
  employeeId       Int
  salary           Int
  insurancePayment String
  bonus            String
  description      String
  month            String
  employee         employee @relation(fields: [employeeId], references: [id])
}

model user {
  id                 Int               @id @default(autoincrement())
  name               String
  fullName           String?
  email              String?
  phone              String?
  credentialId       String            @unique
  publicKey          String
  algorithm          String
  imageId            String?
  invitations        invitation[]
  usersCompanysRoles userCompanyRole[]
}

model userCompanyRole {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId Int
  roleId    Int
  startDate Int
  company   company @relation(fields: [companyId], references: [id])
  role      role    @relation(fields: [roleId], references: [id])
  user      user    @relation(fields: [userId], references: [id])

  @@map("user_company_role")
}

model voucher {
  id        Int        @id @default(autoincrement())
  no        String
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  journal   journal?
  lineItems lineItem[]
}

model value {
  id                      Int     @id @default(autoincrement())
  projectId               Int
  totalRevenue            Int
  totalRevenueGrowthIn30d Int
  totalExpense            Int
  netProfit               Int
  netProfitGrowthIn30d    Int
  netProfitGrowthInYear   Int
  project                 project @relation(fields: [projectId], references: [id])
}

model workRate {
  id              Int     @id @default(autoincrement())
  projectId       Int
  employeeId      Int
  involvementRate Int
  hours           Int
  month           String
  project         project @relation(fields: [projectId], references: [id])
}
